<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Server.API</name>
    </assembly>
    <members>
        <member name="M:Syncfusion.Server.API.Controllers.AccountsController.ValidateServiceAccessJson(Syncfusion.Server.Base.DataClasses.ApiRequest)">
            <summary>
            API to validate the encrypted user id from dashboard service
            </summary>
            <param name="apiRequest">API Request from dashboard designer contains the encrypted string</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.AccountsController.GetUserKeyJson(Syncfusion.Server.Base.DataClasses.UserToken)">
            <summary>
            API to validate the encrypted user id from dashboard service
            </summary>
            <param name="apiRequest">API Request from dashboard designer contains the encrypted string</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.ActivityLogController">
            <summary>
            Controller for Designer Activity Log
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ActivityLogController.AddActivityLog(Syncfusion.Server.Base.DataClasses.ActivityLog)">
            <summary>
            Add Activity Log
            </summary>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.GroupsController">
            <summary>
            Controller for group operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.AddGroupJson(Syncfusion.Server.Base.DataClasses.ApiGroupAdd)">
            <summary>
            Adds a group to the server.
            </summary>
            <param name="groupDetail">Detail of the group.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.DeleteGroup(System.Int32)">
            <summary>
            Deletes the specified group on the server.
            </summary>
            <param name="id">ID of the group.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.EditGroupJson(System.Int32,Syncfusion.Server.Base.DataClasses.ApiGroupEdit)">
            <summary>
            Modifies information about a specified group.
            </summary>
            <param name="id">ID of the group.</param>
            <param name="groupDetail">Detail of the group.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.GetGroupDetail(System.Int32)">
            <summary>
            Returns group details on the server for a specified group.
            </summary>
            <param name="id">ID of the group.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiGroup object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.GetUsesFromGroup(System.Int32)">
            <summary>
            Returns a list of users on the server for the specified group.
            </summary>
            <param name="id">ID of the group.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiUserList object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.AddUserToGroupJson(System.Int32,Syncfusion.Server.Base.DataClasses.ApiGroupUsers)">
            <summary>
            Adds a user to the specified group
            </summary>
            <param name="id">Group ID</param>
            <param name="apiGroupUsers">User(s) added/removed from the group</param>
            <returns>User(s) was added successfully</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.AddUserToGroupJsonV3(System.String,Syncfusion.Server.Base.DataClasses.ApiGroupUsers)">
            <summary>
            Adds a user to the specified group
            </summary>
            <param name="id">Group ID</param>
            <param name="apiGroupUsers">User(s) added/removed from the group</param>
            <returns>User(s) was added successfully</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.DeleteUserFromGroupJson(System.Int32,Syncfusion.Server.Base.DataClasses.ApiGroupUsers)">
            <summary>
            Deletes the user from the specified group
            </summary>
            <param name="id">Group ID</param>
            <param name="apiGroupUsers">User(s) added/removed from the group</param>
            <returns>User(s) deleted</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.DeleteUserFromGroup(System.Int32,Syncfusion.Server.Base.DataClasses.ApiGroupUsers)">
            <summary>
            Deletes the user from the specified group
            </summary>
            <param name="id">Group ID</param>
            <param name="apiGroupUsers">User(s) added/removed from the group</param>
            <returns>User(s) deleted</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.GetGroupsV2">
            <summary>
            Returns the list of groups on the server.
            </summary>
            <remarks></remarks>
            <returns>The response is sent as ApiGroupList Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.GroupsController.GetGroupsV3">
            <summary>
            Returns the list of groups on the server.
            </summary>
            <remarks></remarks>
            <returns>The response is sent as ApiGroupList Object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.InternalApiController">
            <summary>
            Controller for internal operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.AddItemViewJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Add Dashboard views/filters in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.ItemViewByItemIdJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Dashboard views/filters from dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.ItemViewByViewIdJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Dashboard views/filters from dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.ItemViewDeleteJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Delete Dashboard views/filters from dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.UpdateItemViewJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard views/filters query string in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.UpdateItemViewName(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard views/filters name in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.DeleteItemPermissionJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Api to delete the users and group permission for the corresponding item
            </summary>
            <param name="itemRequest">ItemRequest Object</param>
            <remarks></remarks>
            <returns>The response is sent as item response object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.DownloadDataSourceJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Download Datasource in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.UpdateDataSourceJson(Syncfusion.Server.Base.DataClasses.ApiDataSourceUpdate)">
            <summary>
            Update the datasource to the server
            </summary>
            <remarks>
            Users who have a write access for datasource, can update an existing datasource on the server by providing respective datasource details in the request body.
            </remarks>
            <param name="apiDataSourceUpdate">Details about the datasource passed will be updated to the specified datasource id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.GetSystemSettings">
            <summary>
            Get system settings of the dashboard server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.GetWidgetsJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Widget files with permissions in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsApiController.GetPublicItemsJson(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Can get the public items by providing the corresponding item type
            </summary>
            <param name="itemRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetItemDetail(System.Guid)">
            <summary>
            Returns item details from the server for a specified item
            </summary>
            <remarks>
            Server retrieves the respective item details for the values (CategoryId, DashboardId, DatasourceId, WidgetId, ScheduleId) provided in id parameter for the current user.
            </remarks>
            <param name="id">Item ID</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetItemDetailV3(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <param name="serverPath"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetSharedDataSourcesJson(Syncfusion.Server.Base.DataClasses.ApiSharedDataSourceRequest)">
            <summary>
            Returns the list of shared data sources for the specified dashboard from the server
            </summary>
            <remarks>
            Server retrieves the shared data sources of a specific dashboard by providing (dashboard id) to the request body for the current user.
            </remarks>
            <param name="apiSharedDataSourceRequest">Details about the dashboard passed to get their shared data sources.</param>
            <returns>The Response is sent as array of ApiSharedDataSourceResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.UpdateDashboardDataSourcesJson(Syncfusion.Server.Base.DataClasses.ApiDashboardDataSourceUpdate)">
            <summary>
            This method is to map the Dashboard Datasource
            </summary>
            <param name="itemRequest">DashboardDataSource object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetPublicItems(Syncfusion.Server.Base.DataClasses.ItemType)">
            <summary>
            Returns the list of public items from the server
            </summary>
            <remarks>
            Server retrieves the respective public items for the values (dashboard, widget) provided in query parameter itemType for the current user.
            </remarks>
            <param name="itemType">Item type.</param>
            <returns>The response is sent as array of ApiPublicItems object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetFavoriteItems">
            <summary>
            Returns the list of favorite items from the server
            </summary>
            <remarks>
            Server retrieves list of favorite dashboards which belongs to the current user.
            </remarks>
            <returns>The response is sent as array of ApiFavoriteitems object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetChildDashboards(System.Guid)">
            <summary>
            Returns child dashboard details from the server for a specified multi-tabbed dashboard
            </summary>
            <param name="id">Item ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.AddCategoryJson(Syncfusion.Server.Base.DataClasses.ApiCategoryAdd)">
            <summary>
            Add a new category to the server
            </summary>
            <remarks>
            Users who have a create access for categories, can add a new category to the server by providing respective category details in the request body.
            </remarks>
            <param name="apiCategoryAdd">Details about the category passed will be added to the server.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.IsItemNameExistsJson(Syncfusion.Server.Base.DataClasses.ApiValidateItemName)">
            <summary>
            Checks whether the item name already exists in the server
            </summary>
            <remarks>
            Current user can check whether the item (category, report, data source, dataset, schedule) is already exists or not on the server by providing item name (category name, report name, data source name, dataset name, schedule name) and item type (category, report, datasource, dataset, schedule) in the request body.
            </remarks>
            <param name="apiValidateItemName">Details about the item passed will be checked on the server.</param>
            <returns>The response is sent as boolean</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.UpdateCategoryJson(Syncfusion.Server.Base.DataClasses.ApiCategoryUpdate)">
            <summary>
            Update category to the server
            </summary>
            <remarks>
            Users who have a write access for categories, can update an existing category on the server by providing respective category details in the request body.
            </remarks>
            <param name="apiCategoryUpdate">Details about the category passed will be updated to the specified category id.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.DeleteItem(System.Guid)">
            <summary>
            Deletes the specified items on the server
            </summary>
            <remarks>
            Users who have a delete access for item (Category, Dashboard, Datasource, Widget, Schedule), can delete the item on the server by providing (CategoryId, DashboardId, DatasourceId, WidgetId, ScheduleId) in id parameter.
            </remarks>
            <param name="id">Item ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.UpdateCategoryv3(Syncfusion.Server.Base.DataClasses.ApiCategoryUpdateV3)">
            <summary>
            
            </summary>
            <param name="apiCategoryUpdateV3"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.DeleteItemV3(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <param name="serverPath"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.AddReport(Syncfusion.Server.Base.DataClasses.ApiReportAddV5)">
            <summary>
            Add report.
            </summary>
            <param name="apiReportAddV5">Report details</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.ReportAdd(Syncfusion.Server.Base.DataClasses.ApiReportAddV6)">
            <summary>
            Add report.
            </summary>
            <param name="apiReportAddV6">Report details</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.AddDataSource(Syncfusion.Server.Base.DataClasses.ApiReportDataSourceAdd)">
            <summary>
            Add a new datasource to the server.
            </summary>
            <param name="apiReportDataSourceAdd">Datasource details</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.AddDataSet(Syncfusion.Server.Base.DataClasses.ApiReportDataSetAddV5)">
            <summary>
            Add dataset.
            </summary>
            <param name="apiReportDataSetAddV5">Dataset details</param>
            <returns>The response is sent as ApiItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.UpdateReport(Syncfusion.Server.Base.DataClasses.ApiReportUpdateV5)">
            <summary>
            Update report.
            </summary>
            <param name="apiReportUpdateV5">Report details</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.UpdateDataSource(Syncfusion.Server.Base.DataClasses.ApiReportDataSourceUpdateV5)">
            <summary>
            Update datasource.
            </summary>
            <param name="apiReportDataSourceUpdateV5">Datasource details</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.UpdateDataSet(Syncfusion.Server.Base.DataClasses.ApiReportDataSetUpdateV5)">
            <summary>
            Update dataset.
            </summary>
            <param name="apiReportDataSetUpdateV5">Dataset details</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetItems(Syncfusion.Server.Base.DataClasses.ItemType,System.String)">
            <summary>
            Returns list of items from the server.
            </summary>
            <param name="itemType">Item type</param>
            <param name="serverPath">Category path</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.ItemDownload(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            To download the items for user
            </summary>
            <param name="itemRequest">Item request for download item</param>
            <returns>To return api item download responses</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.AddSchedule(Syncfusion.Server.Base.DataClasses.ApiScheduleRequest)">
            <summary>
            Add Schedule
            </summary>
            <remarks>Users who have create access for schedule can add new schedule to the server by providing respective details in the request body.</remarks>
            <param name="apiScheduleRequest">Details about the schedule passed will be added to the server.</param>
            <returns>The response is sent as a ApiScheduleResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.AddScheduleV3(Syncfusion.Server.Base.DataClasses.ApiScheduleRequestV3)">
            <summary>
            Add Schedule
            </summary>
            <remarks>Users who have create access for schedule can add new schedule to the server by providing respective details in the request body.</remarks>
            <param name="apiScheduleRequest">Details about the schedule passed will be added to the server.</param>
            <returns>The response is sent as a ApiScheduleResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.UpdateSchedule(System.Guid,Syncfusion.Server.Base.DataClasses.ApiUpdateScheduleRequest)">
            <summary>
            Update Schedule
            </summary>
            <remarks>Users who have write access for schedule can update an existing schedule to the server by providing details of the respective schedule in the request body.</remarks>
            <param name="scheduleid">Schedule ID.</param>
            <param name="apiUpdateScheduleRequest">Details about the schedule passed will be updated to the server.</param>
            <returns>The response is sent as a ApiScheduleResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.UpdateScheduleV3(System.String,Syncfusion.Server.Base.DataClasses.ApiUpdateScheduleRequestV3)">
            <summary>
            
            </summary>
            <param name="scheduleName"></param>
            <param name="apiUpdateScheduleRequestV3"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetScheduleItems">
            <summary>
            Returns list of scheduled items from the server.
            </summary>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetScheduleItemDetail(System.Guid)">
            <summary>
            Returns scheduled item details from the server for a specified item
            </summary>
            <remarks>
            Server retrieves the respective scheduled item details for the values (ScheduleId) provided in id parameter for the current user.
            </remarks>
            <param name="id">Item ID</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetScheduleItemDetailV3(System.String)">
            <summary>
            
            </summary>
            <param name="scheduleName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.RunScheduleReport(System.Guid)">
            <summary>
            Run Scheduled Report
            </summary>
            <remarks>Users who have read access for schedule can run the scheduled report by providing the ID in the path parameter.</remarks>
            <param name="scheduleId">Schedule ID</param>
            <returns>Response is sent as a ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.RunScheduleReportV3(System.String)">
            <summary>
            
            </summary>
            <param name="scheduleName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetItemLocation(System.Guid)">
            <summary>
            Get Item Location
            </summary>
            <remarks>Server returns the item location of the specified item for the value Report ID, DataSource ID, DataSet ID, and File ID provided in the id parameter.</remarks>
            <param name="itemId">Item ID</param>
            <returns>The response is sent as a string</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.GetItemLocationV3(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <param name="serverPath"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Server.API.Controllers.ItemsController.ExportReport(Syncfusion.Server.Base.DataClasses.ApiExportReport)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Server.API.Controllers.ItemsController.ExportReportWithFilters(System.Guid,System.String,Syncfusion.Server.Base.DataClasses.ExportFilterParameters)" -->
        <member name="M:Syncfusion.Server.API.Controllers.ItemsController.ExportReportV3(Syncfusion.Server.Base.DataClasses.ApiExportReportV3)">
            <summary>
            
            </summary>
            <param name="apiExportReportV3"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.PermissionController.GetUserPermission(System.Int32)">
            <summary>
            Return list of permissions of user
            </summary>
            <remarks>
            By this endpoint administrator can retrieves the list of permissions of a specific user by providing user id in the id parameter.
            </remarks>
            <param name="id">User ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.PermissionController.GetGroupPermission(System.Int32)">
            <summary>
            Return list of permissions of group
            </summary>
            <remarks>
            By this endpoint administrator can retrieves the list of permissions of a specific group by providing group id in the id parameter.
            </remarks>
            <param name="id">Group ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.PermissionController.AddUserPermissionJson(Syncfusion.Server.Base.DataClasses.ApiUserPermissionAdd)">
            <summary>
            Add a user permission to the server.
            </summary>
            <param name="permissionRequest">User permission details</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.PermissionController.AddUserPermission(Syncfusion.Server.Base.DataClasses.ApiUserPermissionAdd)">
            <summary>
            Add a user permission to the server.
            </summary>
            <param name="permissionRequest">User permission details</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.PermissionController.AddGroupPermissionJson(Syncfusion.Server.Base.DataClasses.ApiGroupPermissionAdd)">
            <summary>
            Add a group permission to the server.
            </summary>
            <param name="permissionRequest">Group permission details</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.PermissionController.AddGroupPermission(Syncfusion.Server.Base.DataClasses.ApiGroupPermissionAdd)">
            <summary>
            Add a group permission to the server.
            </summary>
            <param name="permissionRequest">Group permission details</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.PermissionController.DeleteUserPermission(System.Int32)">
            <summary>
            Delete user permission from the server
            </summary>
            <remarks>
            By this endpoint administrator can delete the specific user permissions on the server by providing user permission id in the id parameter.
            </remarks>
            <param name="id">User permission ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.PermissionController.DeleteGroupPermission(System.Int32)">
            <summary>
            Delete group permission from the server
            </summary>
            <remarks>
            By this endpoint administrator can delete the specific group permissions on the server by providing group permission id in the id parameter.
            </remarks>
            <param name="id">Group permission ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ReportServer.ReportServerApiController.DownloadDataSource(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            The method will get the data source location and convert the xml to bytes
            </summary>
            <param name="itemRequest">ItemRequest Class Object</param>
            <returns>Class type ItemResponse</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ReportServer.ReportServerApiController.GetDataset(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            The method will get the dataset location and convert the report data set to bytes
            </summary>
            <param name="itemRequest">Request with item request Class object</param>
            <returns>Class type ItemResponse</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ReportServer.ReportServerApiController.GetDataSource(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get data source definition by data source guid id
            </summary>
            <param name="apiRequest">ItemRequest Class object</param>
            <returns>Class type Item Response</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.SlideShowController.GetSlideshowDetail(System.Guid)">
            <summary>
            Returns slideshow details from the server for a specified slideshow
            </summary>
            <remarks>
            Server retrieves the respective item details for the slideshow id provided in id parameter for the current user.
            </remarks>
            <param name="id">Slideshow ID</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.SlideShowController.GetSlideshows">
            <summary>
            Returns list of slideshows from the server
            </summary>
            <remarks>
            Server retrieves all the slideshows for the current user.
            </remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.SlideShowController.DeleteSlideshow(System.Guid)">
            <summary>
            Deletes the slideshow
            </summary>
            <remarks>
            Users who have a delete access for slideshow, can delete the slideshow on the server by providing slideshow id parameter.
            </remarks>
            <param name="id">Slideshow ID.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.SlideShowController.AddSlideshowJson(Syncfusion.Server.Base.DataClasses.API.ApiSlideshowAdd)">
            <summary>
            Add a new slideshow to the server
            </summary>
            <remarks>
            Users who have a create access for slideshow, can add a new slideshow to the server by providing respective slideshow details in the request body.
            </remarks>
            <param name="apiSlideshowAdd">Details about the slideshow passed will be added to the server.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.SlideShowController.EditSlideshowJson(System.Guid,Syncfusion.Server.Base.DataClasses.API.ApiSlideshowEdit)">
            <summary>
            Edit Slideshow
            </summary>
            <remarks>
            Users who have write access for slideshow can update an existing slideshow to the server by providing details of the respective slideshow in the request body.
            </remarks>
            <param name="id">Slideshow ID.</param>
            <param name="apiSlideshowEdit">Details about the slideshow passed will be updated to the server.</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.SystemSettingsController.GetPublicSettings">
            <summary>
            Get Public Settings
            </summary>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.TenantController">
            <summary>
            Controller for Tenant related actions
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.TenantController.SuspendTenant">
            <summary>
            Suspend tenant
            </summary>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.TenantController.DeleteTenant">
            <summary>
            Delete tenant
            </summary>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.TenantController.ActivateTenant">
            <summary>
            Activate tenant
            </summary>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse Object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.TenantController.UpdateTenantNameJson(System.String)">
            <summary>
            Update tenant name
            </summary>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse Object</returns>
            [HttpPut]
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.TenantController.AddUsersJson(System.Object)">
            <summary>
            Adds list of users to the server.
            </summary>
            <param name="data">Details of the user list with invited user name.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UserManagementController.IsUserPresentInGroupJson(Syncfusion.Server.Base.DataClasses.Group)">
            <summary>
            Check the group whether the corresponding user is exist or not.
            </summary>
            <param name="groupRequest">groupRequest object which is sent as request</param>
            <returns>Returns the boolean property</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Controllers.UsersController">
            <summary>
            Controller for user operations
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.AddUserV2Json(Syncfusion.Server.Base.DataClasses.ApiUserAdd)">
            <summary>
            Adds a user to the server.
            </summary>
            <param name="userDetail">Detail of the user.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.DeleteUser(System.String)">
            <summary>
            Deletes the specified user on the server.
            </summary>
            <param name="user">Email address of the user.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.EditUserJson(System.String,Syncfusion.Server.Base.DataClasses.ApiUserEdit)">
            <summary>
            Modifies information about the specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <param name="userDetail">Detail of the user.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.GetUsers">
            <summary>
            Returns the list of users on the server.
            </summary>
            <remarks></remarks>
            <returns>Returns the ApiUserList object contains the list of users</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.GetUsersV3">
            <summary>
            Returns the list of users on the server.
            </summary>
            <remarks></remarks>
            <returns>Returns the ApiUserList object contains the list of users</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.GetUserDetailV2(System.String)">
            <summary>
            Returns user details on the server for a specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <returns>The response is sent as ApiUserDetail object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.GetUserDetailV3(System.String)">
            <summary>
            Returns user details on the server for a specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <returns>The response is sent as ApiUserDetail object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.DownloadCsvTemplate">
            <summary>
            Downloads CSV template from the server.
            </summary>
            <returns>The response is sent as ApiDownloadCsvTemplate object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.CsvUserImportJson(Syncfusion.Server.Base.DataClasses.ApiCsvUserImportRequest)">
            <summary>
            Adds bulk users from CSV file to the server.
            </summary>
            <param name="apiCsvUserImportRequest">Contains CSV user import request.</param>
            <returns>The response is sent as ApiCsvUserImportResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.ActivateDeactivateuserJson(System.String,Syncfusion.Server.Base.DataClasses.ApiUserActivationRequest)">
            <summary>
            Activate or deactivate user account.
            </summary>
            <param name="user">Email address of the user.</param>
            <param name="activationRequest">User activation or deactivation request</param>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.UsersController.GetGroupsOfUser(System.String)">
            <summary>
            Returns group details of a specified user from the server.
            </summary>
            <param name="user">User ID or Email address of the user.</param>
            <returns>Group details retrieved successfully.</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.UsersController.AddUserV4Json(Syncfusion.Server.Base.DataClasses.ApiUserAdd)">
            <summary>
            Adds a user to the server.
            </summary>
            <param name="userDetail">Detail of the user.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.UsersController.EditUserV4Json(System.String,Syncfusion.Server.Base.DataClasses.ApiUserEdit)">
            <summary>
            Modifies information about the specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <param name="userDetail">Detail of the user.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.UsersController.DeleteUser(System.String)">
            <summary>
            Deletes the specified user on the server.
            </summary>
            <param name="user">Email address of the user.</param>
            <remarks></remarks>
            <returns>The response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.V4.UsersController.GetUserDetail(System.String)">
            <summary>
            Returns user details on the server for a specified user.
            </summary>
            <param name="user">Email address of the user.</param>
            <returns>The response is sent as ApiUserDetail object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemViewsController.AddItemViewJson(Syncfusion.Server.Base.DataClasses.ApiItemViewsAdd)">
            <summary>
            Add Dashboard View
            </summary>
            <remarks>
            Users who have access to the dashboard can save a view to the server by providing proper view details in the request body.
            </remarks>
            <param name="apiItemViewsAdd">Details about the dashboard filter to save the view.</param>
            <returns>The Response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemViewsController.UpdateItemViewJson(Syncfusion.Server.Base.DataClasses.ApiItemViewsUpdate)">
            <summary>
            Edit Dashboard View
            </summary>
            <remarks>
            Users who have created a view can edit the view by providing proper view details in the request body.
            </remarks>
            <param name="apiItemViewsUpdate">Details about the dashboard filter to edit the view.</param>
            <returns>The Response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemViewsController.ItemViewDelete(System.Guid)">
            <summary>
            Delete Dashboard View
            </summary>
            <remarks>
            Users who have created a view can delete that view on the server by providing a view ID in the parameter.
            </remarks>
            <param name="id">View ID</param>
            <returns>The Response is sent as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemViewsController.ItemViewByViewId(System.Guid)">
            <summary>
            Get Dashboard View Detail
            </summary>
            <remarks>
            Server retrieves the view details for the view ID provided in the ID parameter for the current user.
            </remarks>
            <param name="id">View ID</param>
            <returns>The Response is sent as ApiItemViewResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Controllers.ItemViewsController.ItemViewsByItemId(System.Guid)">
            <summary>
            Get Dashboard Views
            </summary>
            <remarks>
            The server retrieves the views for the dashboard ID provided in the ID parameter for the current user.
            </remarks>
            <param name="id">Dashboard ID</param>
            <returns>The Response is sent as list of ApiItemViewResponse object</returns>
        </member>
        <member name="T:Syncfusion.Server.API.Extensions.ApplicationBuilderExtensions">
            <summary>
            Application Builder Extensions Class.
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.ClaimsFactory.CreateIdentityAsync(Syncfusion.Server.Base.DataClasses.User,System.String,System.String,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
                Create a ClaimsIdentity from a user
            </summary>
            <param name="user"></param>
            <param name="authenticationType"></param>
            <returns></returns>
            
        </member>
        <member name="M:Syncfusion.Server.API.ClaimsFactory.CreateIdentityAsync(Syncfusion.Server.Base.DataClasses.TenantInfo,System.String)">
            <summary>
                Create a ClaimsIdentity from a application
            </summary>
            <param name="application"></param>
            <param name="authenticationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Middlewares.AuthorizeRequestMiddleware.InitializeLicenseValidation(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            License validation from Build team
            Note: Whenever license checking needed, Copy - paste the below method in the same assembly where your validation happens. Since, moving this method to base and reusing will result in issues due to build team checking assembly signing.
            </summary>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.PublishWidget(Syncfusion.Server.Base.DataClasses.ApiWidgetAdd)">
            <summary>
            Add Dashboard in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateWidget(Syncfusion.Server.Base.DataClasses.ApiWidgetUpdate)">
            <summary>
            Update Widget in dashboard Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.AddItemView(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Add Dashboard Filter/view from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.GetItemViewsByItemId(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Dashboard Filter/view by item id from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.GetItemViewsByViewId(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get Dashboard Filter/view by view id from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.DeleteItemView(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Delete Dashboard Filter/view from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateItemViewQueryString(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard Filter/view query string from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateItemViewName(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard Filter/view Name from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.UpdateItemView(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Update Dashboard filter/view name, query string from the dashboard viewer
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.IsNameExists(Syncfusion.Server.Base.DataClasses.ApiValidateItemName)">
            <summary>
            validates the requested name for the existance of item
            </summary>
            <param name="itemRequest">validation details</param>
            <returns>Returns the existance of requested name from the server</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.PublishFile(Syncfusion.Server.Base.DataClasses.ApiFileAdd)">
            <summary>
            publishing file in the Server
            </summary>
            <param name="itemRequest">contains the details of the file</param>
            <returns>Response is sent as itemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.DownloadFileById(System.Guid)">
            <summary>
            The method will get the file and convert to bytes as response
            </summary>
            <param name="itemRequest">Request object from report designer</param>
            <returns>Class type ItemResponse</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.GetItemLocation(System.Guid)">
            <summary>
            Get Item Location
            </summary>
            <remarks>Gets the location of particular item form the server.</remarks>
            <param name="itemId">Item id</param>
            <returns>The response is sent as a string</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ItemsModel.DownloadItemById(System.Guid)">
            <summary>
            We can download the items from API for report server viewer
            </summary>
            <param name="itemId">Item id for particular item to download</param>
            <returns>The response sent has a ItemDownloadResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.DataSourceManager.IsValidSqlConnectionString(System.String)">
            <summary>
            This method is used to test connection string for SQL Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.DataSourceManager.IsValidSqlCeConnectionString(System.String)">
            <summary>
            This method is used to test connection string for SQLCE Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.DataSourceManager.IsValidOledbConnectionString(System.String)">
            <summary>
            This method is used to test connection string for OLEDB Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.DataSourceManager.IsValidOdbcConnectionString(System.String)">
            <summary>
            This method is used to test connection string for OBDC Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.DataSourceManager.IsValidOracleConnectionString(System.String)">
            <summary>
            This method is used to test connection string for Oracle Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.DataSourceManager.OnTestConnectionString(System.String,System.String)">
            <summary>
            This method is used to test the connection string for the data source type and connection string
            </summary>
            <param name="dataSourceExtension">data source type</param>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.PublishReport(Syncfusion.Server.Base.DataClasses.ApiReportAdd)">
            <summary>
            Add RDL report in Reports Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.PublishDataSource(Syncfusion.Server.Base.DataClasses.ApiReportDataSourceAdd)">
            <summary>
            Add data source in Reports Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.PublishDataSet(Syncfusion.Server.Base.DataClasses.ApiReportDataSetAdd)">
            <summary>
            Add dataset in Reports Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.UpdateReport(Syncfusion.Server.Base.DataClasses.ApiReportUpdate)">
            <summary>
            Update RDL report in Reports Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.UpdateDataSource(Syncfusion.Server.Base.DataClasses.ApiReportDataSourceUpdate)">
            <summary>
            Update data source in Reports Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.UpdateDataSet(Syncfusion.Server.Base.DataClasses.ApiReportDataSetUpdate)">
            <summary>
            Update RSD Dataset in Reports Server
            </summary>
            <param name="itemRequest">ItemRequest object which is sent as request</param>
            <returns>The response is sent as ItemResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.GetDataSet(System.Collections.Generic.List{System.String})">
            <summary>
            This method is used to get the dataset content as bytes.
            </summary>
            <param name="datasetList">list of datasets of the report.</param>
            <returns>It returns list of dataset content and its id/name.</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.GetDataSourceDefinitionById(Syncfusion.Server.Base.DataClasses.ItemRequest,System.Boolean)">
            <summary>
            Get data source definition by data source guid id
            </summary>
            <param name="id">Data source guid id requested as string</param>
            <param name="isDecryptPassword">isDecryptPassword default value false</param>
            <param name="itemRequest">item request class object</param>
            <returns>Class type ItemResponse</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Designer.DownloadDataSourceFileById(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>
            The method will get the data source location and convert the xml to bytes
            </summary>
            <param name="datasourceReferences">It contains either datasource id or datasource name</param>
            <param name="isInternalApiRequest">isDecryptPassword default value false</param>
            <param name="isDecryptPassword">isDecryptPassword default value false</param>
            <returns>It returns filecontent of the reports in bytes and its id/name.</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.ReportServer.Viewer.GetReportById(Syncfusion.Server.Base.DataClasses.ItemRequest)">
            <summary>
            Get the report definition and list of data source definition
            </summary>
            <param name="itemRequest">item request class object</param>
            <returns>Class type ViewerReport API</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.SchedulerManagementModel.AddSchedule(Syncfusion.Server.Base.DataClasses.ApiScheduleRequest,System.Boolean,System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.ApiReportParameter})">
            <summary>
            
            </summary>
            <param name="apiScheduleRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.SchedulerManagementModel.IsReportParameterEnabled(BoldReports.RDL.DOM.ReportDefinition,System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.ApiReportParameter})">
            <summary>
            Returning boolean values, whether to enable the parameters or not for the schedule.
            </summary>
            <param name="reportDefinition">Default values in the report</param>
            <param name="reportParameter">Parameter Values provided by user</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.SchedulerManagementModel.SubscribeUsers(System.Guid,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Adding subscribed users to the table.
            </summary>
            <remarks>userlist can be username,email-address, or userID</remarks>
            <param name="userList">list of users</param>
            <returns>Retruns the invalid user list. deleted user, user not in server and in-active users are considered as invalid users</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.SchedulerManagementModel.RunScheduledReport(System.Guid)">
            <summary>
            We can run the scheduled report from API by providing the schedule ID.
            </summary>
            <param name="scheduleId">Schedule ID</param>
            <returns>Returns success response as ApiResponse object</returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.GetDataTableFromCsvFile(System.String)">
            <summary>
            get the users from the csv file by using comma separater
            </summary>
            <param name="csvFilePath">file path of the csv</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.AddUserInGroup(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Add list of user's in the specified group
            </summary>
            <param name="userList">list of user ID</param>
            <param name="groupId">Group ID</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.AddUserInGroupV2(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Add list of user's in the specified group
            </summary>
            <param name="userNameList">list of user Email</param>
            <param name="groupId">Group ID</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.DeleteUserFromGroup(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Delete list of user's from the specified group
            </summary>
            <param name="userList">list of user ID</param>
            <param name="groupId">Group ID</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.API.Models.UserManagementModel.SubmitUsersBulkUpload(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}},System.String)">
            <summary>
            validates the user details and add it to server if there is no error
            </summary>
            <param name="allUserList"></param>
            <returns>returns the errorneous users list</returns>
        </member>
        <member name="M:Syncfusion.Server.API.ApiOAuthProvider.GenerateToken(Microsoft.AspNetCore.Http.HttpContext,Syncfusion.Server.Base.DataClasses.User,System.String,System.String,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Do not use this method for generation token unless needed.
            This is used only when this API application needs a new token to send to the client
            for which it will call the /api/token endpoint from an exisitng api request.
            </summary>
            <param name="userDetail">Detail of the user</param>
            <param name="ipAddress">IP address of the request</param>
            <param name="expiresIn">Specifies the expiry time in seconds</param>
            <returns></returns>
        </member>
    </members>
</doc>
