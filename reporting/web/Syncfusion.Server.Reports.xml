<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Server.Reports</name>
    </assembly>
    <members>
        <member name="M:Syncfusion.Server.Reports.ActionFilters.CompressionActionFilter.GZipEncodePage(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Sets up the current page or handler to use GZip through a Response.Filter
            IMPORTANT:
            You have to call this method before any output is generated!
            </summary>
        </member>
        <member name="M:Syncfusion.Server.Reports.ActionFilters.CompressionActionFilter.IsGZipSupported(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Determines if GZip is supported
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.ActionFilters.CompressionActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Override to compress the content that is generated by
            an action method.
            </summary>
            <param name="filterContext">Filter Context ActionExecutingContext Class object</param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.AccountsController.InitializeWebServerClient">
            <summary>
            Initialize the Settings for the UMS
            </summary>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.DeleteConfirmation">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.DeleteItem">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.ItemGroupPermissionList(System.String)">
            <summary>
            This method is to get the accessible group list of an item
            </summary>
            <param name="itemId">Id of the Item</param>
            <returns>Group List</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.ItemPermissionView(System.String)" -->
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.ItemUserPermissionList(System.String)">
            <summary>
            This method is to get the accessible user list of an item
            </summary>
            <param name="itemId">Id of the Item</param>
            <returns>Users List</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.AddSampleItems">
            <summary>
            This method is to get the sample items
            </summary>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.IsDraftExist(System.String)">
             <summary>
            
             </summary>
             <param name="reportName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.AddSampleItem(System.String,System.String,System.String,System.String)">
            <summary>
            This method is to add the sample item
            </summary>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.GetLinkView">
            <summary>
            Return the View for get item link
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.CloneItem(System.String,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="toCategoryId"></param>
             <param name="inputUserId"></param>
             <param name="itemName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.CopyItem(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.DataSetMappingInfo},System.Boolean)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="toCategoryId"></param>
             <param name="userId"></param>
             <param name="itemName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.GetCategory(System.String)">
             <summary>
            
             </summary>
             <param name="tenantName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.TenantCopy(System.Guid,System.Guid,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="toCategoryId"></param>
             <param name="itemName"></param>
             <param name="tenantName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.CopyViewItem(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="itemAction"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.ChangeDataSource(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="itemAction"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.DeleteItemViewPermission(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="permission"></param>
             <param name="deleteItem"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.GetGroupItemViewPermissions(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.SortMethod},System.String,System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.FilterMethod})">
             <summary>
            
             </summary>
             <param name="itemViewId"></param>
             <param name="skip"></param>
             <param name="take"></param>
             <param name="sorted"></param>
             <param name="searchKey"></param>
             <param name="filterCollection"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.GetUserItemViewPermissions(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.SortMethod},System.String,System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.FilterMethod})">
             <summary>
            
             </summary>
             <param name="itemViewId"></param>
             <param name="skip"></param>
             <param name="take"></param>
             <param name="sorted"></param>
             <param name="searchKey"></param>
             <param name="filterCollection"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.IsDataSourceExist(System.String)">
             <summary>
            
             </summary>
             <param name="fileName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.IsFileExist(System.String)">
             <summary>
            
             </summary>
             <param name="fileName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.ItemAddOptions">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.ItemLogs(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.SortMethod})">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="skip"></param>
             <param name="take"></param>
             <param name="sorted"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.ShareItemPermission(System.String)">
            <summary>
            This method is to get the share permission for an item
            </summary>
            <param name="itemId">Id of the Item</param>
            <returns>Users List, Group List, shared user group list, access mode values</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.ItemVersion(System.String)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.MakeItemPublic">
            <summary>
            Return the View for getting confirmation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.MakePublicItem">
            <summary>
            Return the result for the make public action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.MoveItem(System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="toCategoryId"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.MoveViewItem(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="itemAction"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.RemoveItemPublic">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.RemovePublic">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.RollbackItem(System.Guid,System.Int32)">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="versionId"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.Items.ItemsController.VersionItems(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.SortMethod})">
             <summary>
            
             </summary>
             <param name="itemId"></param>
             <param name="skip"></param>
             <param name="take"></param>
             <param name="sorted"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.CategoryController.AddCategory(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="categoryName"></param>
             <param name="description"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.CategoryController.AddCategoryToTenant(System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="categoryName"></param>
             <param name="description"></param>
             <param name="tenantName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.CategoryController.Category">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.CategoryController.EditCategory">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.CategoryController.GetItems(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.SortMethod},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.FilterMethod})">
             <summary>
            
             </summary>
             <param name="searchKey"></param>
             <param name="skip"></param>
             <param name="take"></param>
             <param name="sorted"></param>
             <param name="filterCollection"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.CategoryController.IsCategoryExist(System.String)">
             <summary>
            
             </summary>
             <param name="categoryName"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.ReportsController.DeleteTemporaryRDLReport">
            <summary>
            If the popup is closed without any changes the uploaded file will be deleted from temporary files
            </summary>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.ReportsController.GetItems(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.SortMethod},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.FilterMethod},Syncfusion.Server.Base.DataClasses.DisplayCategory,System.Boolean)">
             <summary>
            
             </summary>
             <param name="searchKey"></param>
             <param name="skip"></param>
             <param name="take"></param>
             <param name="sorted"></param>
             <param name="filterCollection"></param>
             <param name="displayCategory"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.PartialViewController.GetTenantStatus">
            <summary>
            return tenant status
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.PartialViewController.GetNotificationCount">
            <summary>
            Return notification count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.SchedulerController.GetRecurrenceType(System.String)">
            <summary>
            Get the enum values.
            </summary>
            <returns>Json Result of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Controllers.UserController.UserPermission">
            <summary>
            To get the permissions of current user along with the group permissions assigned to them.
            </summary>
            <returns>Returns all the permissions of current user along with the permisions of group in which the user belongs to </returns>
        </member>
        <member name="T:Syncfusion.Server.Reports.Extensions.ApplicationBuilderExtensions">
            <summary>
            Application Builder Extensions Class.
            </summary>
        </member>
        <member name="M:Syncfusion.Server.Reports.ApplicationAuthorizationRequest.InitializeLicenseValidation(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            License validation from Build team
            Note: Whenever license checking needed, Copy - paste the below method in the same assembly where your validation happens. Since, moving this method to base and reusing will result in issues due to build team checking assembly signing.
            </summary>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSetManager.AddDataSet(Syncfusion.Server.Base.DataClasses.ItemDetail,System.String,System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.DataSourceMappingInfo},System.Int32)">
            <summary>
            This method will add RDL report with shared data sources and map the appropriate data sources with selected data sources
            </summary>
            <param name="file">Http request elements which is used to add report item in data base</param>
            <param name="temporaryFileName">File name of the saved file in temporary folder</param>
            <param name="selectedDataSources">List of selected folders for appropriate data sources of RDL</param>
            <param name="currentUserId">Current User Id</param>
            <returns>Status of operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSetManager.AddDataSetWithReport(System.String,System.String,System.String)">
            <summary>
            This method is used to map dataset of the RDL with selected dataset
            </summary>
            <param name="dataSourceName">Name of the dataset provided in RDL file</param>
            <param name="dataSourceId">Selected dataset for the RDL report</param>
            <param name="targetFileId">Item id of the uploaded RDL file</param>
            <param name="dataSourceIdentity">Source identity of the dataset</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSetManager.AddDataSourceWithDataSet(System.String,System.String,System.String)">
            <summary>
            This method is used to map data source of the RSD with selected data sources
            </summary>
            <param name="dataSourceName">Name of the data source provided in RSD file</param>
            <param name="dataSourceId">Selected data source for the RSD dataset</param>
            <param name="targetFileId">Item id of the uploaded RSD file</param>
            <param name="dataSourceIdentity">Source identity of the data source</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSetManager.GetAllDataSetListOfUser(System.Int32)">
            <summary>
            This method is used to give all the accessible data sources of the user
            </summary>
            <param name="userId">Id of the user</param>
            <returns>Returns list of dataset</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSetManager.GetDataSetDetailsByReportId(System.Guid)">
            <summary>
            This method is used to get the dataset details of the report
            </summary>
            <param name="reportId">Id of the report</param>
            <returns>Returns list of dataset used in the report</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSetManager.GetDataSourceDetailsbyDataSetId(System.Guid)">
            <summary>
            This method is used to get the data source details of the dataset
            </summary>
            <param name="userId">Id of the dataset</param>
            <returns>Returns data source</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSetManager.UploadRsdFile(System.IO.Stream,System.Int32)">
            <summary>
            This method is used to upload the RDL file for data source processing. The uploaded file will be saved in temporary folder.
            </summary>
            <param name="fileStream">Stream of the dataset file</param>
            <param name="currentUserId">Id of the user</param>
            <returns>Returns Temporary file name and data source list</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.DeleteTemporaryFile(System.String)">
            <summary>
            If the popup is closed without any changes the uploaded file will be deleted from temporary files
            </summary>
            <param name="fileName">Name of the target file</param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.IsValidOdbcConnectionString(System.String)">
            <summary>
            This method is used to test connection string for OBDC Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.IsValidOledbConnectionString(System.String)">
            <summary>
            This method is used to test connection string for OLEDB Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.IsValidOracleConnectionString(System.String)">
            <summary>
            This method is used to test connection string for Oracle Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.IsValidSqlCeConnectionString(System.String)">
            <summary>
            This method is used to test connection string for SQLCE Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.IsValidSqlConnectionString(System.String)">
            <summary>
            This method is used to test connection string for SQL Connection
            </summary>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.OnTestConnectionString(System.String,System.String)">
            <summary>
            This method is used to test the connection string for the data source type and connection string
            </summary>
            <param name="dataSourceExtension">data source type</param>
            <param name="connectionString">connection string provided in form element</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.OnTestDataSourceConnection(Syncfusion.Server.Base.DataClasses.DataSourceDefinition)">
            <summary>
             This will test the connection status for the provided details
            </summary>
            <param name="dataSourceDefinition">Request elements which is saved as object</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.UploadRdlFile(System.IO.Stream,System.Int32)">
            <summary>
            This method is used to upload the RDL file for data source processing. The uploaded file will be saved in temporary folder.
            </summary>
            <param name="fileStream">RDL file stream</param>
            <param name="currentUserId">Current user id</param>
            <returns>reportUploadResponse class object</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.AddDataSource(Syncfusion.Server.Base.DataClasses.ItemDetail,Syncfusion.Server.Base.DataClasses.DataSourceDefinition,System.Int32)">
            <summary>
            This method is used to add data source in server
            </summary>
            <param name="file">Request elements of the uploaded data source</param>
            <param name="dataSourceDefinition">Data source definition for the data source</param>
            <param name="currentUserId">Current user id</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.AddEmbeddedRdlReport(Syncfusion.Server.Base.DataClasses.ItemDetail,System.String,System.Int32)">
            <summary>
            This method is used to add embedded RDL report in server
            </summary>
            <param name="file">Http request elements which is used to add report item in data base</param>
            <param name="temporaryFileName">File name of the saved file in temporary folder</param>
            <param name="currentUserId">Current user id</param>
            <returns>Status of operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.DataSourceManager.GetAllDataSourceListOfUser(System.Int32)">
            <summary>
            This method is used to give all the accessible data sources of the user
            </summary>
            <param name="userId">user id</param>
            <returns>item detail list object</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.ItemModel.AddRdlReport(Syncfusion.Server.Base.DataClasses.ItemDetail,System.String,System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.DataSourceMappingInfo},System.Collections.Generic.List{Syncfusion.Server.Base.DataClasses.DataSetMappingInfo},System.Int32)">
            <summary>
            This method will add RDL report with shared data sources and map the appropriate data sources with selected data sources
            </summary>
            <param name="file">Http request elements which is used to add report item in data base</param>
            <param name="temporaryFileName">File name of the saved file in temporary folder</param>
            <param name="selectedDataSources">List of selected folders for appropriate data sources of RDL</param>
            <param name="selectedDataSets">Selected dataset</param>
            <param name="currentUserId">Current User Id</param>
            <returns>Status of operation</returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.ScheduleManagement.DisableSchedule(System.Guid)">
            <summary>
            Disabling a schedule
            </summary>
            <param name="scheduleId"></param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.ScheduleManagement.EnableSchedule(System.Guid)">
            <summary>
            Enabling a schedule
            </summary>
            <param name="scheduleId"></param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.ScheduleManagement.RemoveSchedule(System.Guid,System.Int32)">
            <summary>
            Removes a schedule
            </summary>
            <param name="scheduleId"></param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.ScheduleManagement.DeactivateGroup(System.Guid,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deactivate the group
            </summary>
            <param name="scheduleId"></param>
            <param name="resultGroupList"></param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.ScheduleManagement.ActivateGroup(System.Guid,System.Int32)">
            <summary>
            Activate the group
            </summary>
            <param name="scheduleId"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.ScheduleManagement.ActivateUser(System.Guid,System.Int32)">
            <summary>
            Activates the user
            </summary>
            <param name="scheduleId"></param>
            <param name="username"></param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.ScheduleManagement.DeactivateUser(System.Guid,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deactivate the user
            </summary>
            <param name="scheduleId"></param>
            <param name="resultList"></param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.SystemStartupPageModel.AddSystemAdmin(System.String,System.String,System.String,System.String)">
            <summary>
            Add System Admin
            </summary>
            <param name="userName">User name</param>
            <param name="firstName">Full name of user</param>
            <param name="lastName">Last name of user</param>
            <param name="emailId">Email Id</param>
            <param name="password">Password</param>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.UserManagementModel.SpecialCharacterValidation(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.UserManagementModel.ProfileUpdateByAdmin(Microsoft.AspNetCore.Mvc.ControllerContext,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String)">
            <summary>
            Admin updates the user information
            </summary>
            <param name="context">Encapsulates information about an HTTP request</param>
            <param name="updatedDetails">Updated details in User Profile</param>
            <param name="toAddress">User's email address</param>
            <param name="fullName">Name of the User</param>
            <returns>True,Updated user profile mailed successfully
            </returns>
        </member>
        <member name="M:Syncfusion.Server.Reports.Models.UserManagementModel.ProfileUpdateByUser(Microsoft.AspNetCore.Mvc.ControllerContext,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Updates the user information
            </summary>
            <param name="context">Encapsulates information about an HTTP request</param>
            <param name="updatedDetails">Updated details in User Profile</param>
            <param name="toAddress">User's email address</param>
            <param name="fullName">Name of the User</param>
            <returns>True,Updated user profile mailed successfully
            </returns>
        </member>
    </members>
</doc>
