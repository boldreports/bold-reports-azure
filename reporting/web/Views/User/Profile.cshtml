@using System.Configuration
@using Syncfusion.Server.Base.Helpers
@model NotificationSettings

@{
    var globalAppSettings = _globalAppSettings;
    var identityResponse = Context.RequestServices.GetRequiredService<ServerPrincipal>();

    var userDetail = (User)ViewBag.UserDetail;
    var groupList = ViewBag.GroupList;
    ViewBag.Title = "[[[My Profile]]] - " + globalAppSettings.SystemSettings.OrganizationName;
    var idpProfileUrl = ViewBag.IdpProfileUrl;
    var idpChangePasswordUrl = ViewBag.IdpChangePasswordUrl;
    var isProfileUpdateSuccess = ViewBag.IsProfileUpdateSuccess;
    var isProfileUpdateFailure = ViewBag.IsProfileUpdateFailure;
    var isPasswordUpdateSuccess = ViewBag.IsPasswordUpdateSuccess;
    var isPasswordUpdateFailure = ViewBag.IsPasswordUpdateFailure;
    var idpreferenceId = Context.Session.GetString("idpReferenceId") != null ? Context.Session.GetString("idpReferenceId").ToString() : string.Empty;
    var idPUrl = globalAppSettings.SystemSettings.IDPUrl;
    ViewBag.HelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.UserProfile);
    var reportServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
}

@section scripts{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/profile.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/profile.css")" crossorigin="anonymous" />
        <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/profile.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/profile.js")" crossorigin="anonymous"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/profile.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/profile.min.css")" crossorigin="anonymous" />
        <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/profile.min.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/profile.min.js")" crossorigin="anonymous"></script>
    </environment>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript">
        var dashboardServerResourceUrl = "@globalAppSettings.SystemSettings.CDNLink";
        var updateprofilepictureUrl = "@Url.Action("updateprofilepicture", "User")";
        var isAdmin = @Json.Serialize(ViewBag.IsAdminAccount);
        var fileUploadUrl = "@Url.Action("Upload", "fileupload")";
        var avatarUrl = "@(idPUrl + Url.Action("Avatar", "User"))";
        var updateUserProfileUrl = "@Url.Action("UpdateUserHomePageInProfile", "User")";
        var updatepasswordUrl = "@Url.Action("updatepassword", "User")";
        var deleteavatarUrl = "@Url.Action("deleteavatar", "UserManagement")";
        var getdefaultavatarUrl = "@Url.Action("getdefaultavatar", "User")";
        var saveUserNotificationSettingsUrl = "@Url.Action("savenotificationsettings", "User")";

        var successMessage = "@isProfileUpdateSuccess";
        var failureMessage = "@isProfileUpdateFailure";
        var passwordSuccessMessage = "@isPasswordUpdateSuccess";
        var passwordFailureMessage = "@isPasswordUpdateFailure";
        var isViewerEnabled = @Json.Serialize(ViewBag.IsViewerV2Enabled);
        var isDesignerEnabled = @Json.Serialize(ViewBag.IsDesignerV2Enabled);

        window.onload = function (e) {
            if (successMessage.toLowerCase() === "true" && successMessage != null) {
                SuccessAlert("[[[Update Profile]]]", "[[[User profile has been updated successfully.]]]", 7000);
            }
            else if (failureMessage.toLowerCase() === "true" && failureMessage != null) {
                WarningAlert("[[[Update Profile]]]", "[[[User profile update failed.]]]", 7000);
            }
            else if (passwordSuccessMessage.toLowerCase() === "true" && passwordSuccessMessage != null) {
                SuccessAlert("[[[Update Password]]]", "[[[Password has been updated successfully.]]]", 7000);
            }
            else if (passwordFailureMessage.toLowerCase() === "true" && passwordFailureMessage != null) {
                WarningAlert("[[[Update Password]]]", "[[[Password update failed.]]]", 7000);
            }
        }

        $(document).ready(function () {
            $("#avatar-button-click, #avatar-delete-click").css("display","none");
            $(".ej2-user-preference-toggle-disabled").attr("disabled", true);
            if (@ViewBag.EditProfile > 0) {
                $("#edit").trigger("click");
            }
            if(@ViewBag.EditNotification > 0){
                $("#edit-settings").trigger("click");
            }
            $('[data-toggle="tooltip"]').tooltip();
            var fulldata = JSON.parse(@Json.Serialize(ViewBag.ProfileDetail));
            window.dateFormat = "@globalAppSettings.SystemSettings.DateFormat";
            editUser(fulldata, "@globalAppSettings.SystemSettings.DateFormat");

            $(document).on("click", ".popup-close", function (e) {
                $(".edit-profile-field").attr("value","updateUserProfileUrl");
                $("#profile-picture").attr("src", "@(globalAppSettings.SystemSettings.CDNLink.TrimEnd('/') + "/cdn/images/preview.jpg")");
                $('#upload-image').attr("disabled", "disabled");
                if ($(".img-container").children().hasClass("jcrop-active")) {
                    $('#profile-picture').data("Jcrop").destroy();
                }
                $(function () {
                    $("#avatar-upload-box").ejDialog({
                        showOnInit: false,
                        allowDraggable: true,
                        enableResize: false,
                        width: "600px",
                        enableModal: true,
                        showHeader: false,
                        close: "DialogBoxClose",
                        closeOnEscape: true
                    });
                });
                eDialog = $("#avatar-upload-box").data("ejDialog");
                eDialog.close();
            });            
        });
    </script>
}
@section MainSection{
    @await Html.PartialAsync("_ProfileMenu")
    <div id="edit-profile-base-div" class="col-lg-12 col-sm-12 col-md-12 col-xs-12 ">
        <input type="hidden" class="page-name" data-content="[[[USER PROFILE]]]">
        <input type="hidden" id="user-id" value="@identityResponse.User.Email;" />
        <span id="is-aduser">@ViewBag.IsAdUser</span>
        <span id="logged-user">@ViewBag.LoggedUser</span>
        <div class="col-lg-12 col-sm-12 col-md-12 col-xs-12 no-padding admin-page-container" id="user-profile-master">
            <div id="edit-profile-heading-div" class="col-lg-12 col-md-12 co-sm-12 col-xs-12 admin-page-header">
                <hgroup>
                    <h1 class="col-xs-3 col-sm-4 col-md-4 col-lg-4 section-heading page-title header">[[[MY PROFILE]]]</h1>
                </hgroup>
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-8 button-section">
                    @if (!ViewBag.IsAdUser)
                    {
                        <a href="@idpChangePasswordUrl" class="link-button app-btn-link pull-right edit-password" title="">[[[Change Password]]]</a>
                    }
                </div>
            </div>
            <div class="profile-section profile-section-first-div col-lg-12 col-md-12 col-sm-12 col-xs-12 no-padding admin-page-body">
                <div class="img-view-holder col-lg-12 col-md-12 col-sm-10 col-xs-12" style="border: 0px">
                    <div class="profile-pic-tag" data-id="@idpreferenceId" data-type="user" data-display-name="@userDetail.DisplayName" data-image-size="120" data-toggle="tooltip" title="@userDetail.DisplayName" data-placement="top"></div>
                </div>
                <div id="edit-profile-form-div" class="col-sm-6 col-xs-12 no-padding margin-top10">

                    <form class="form-horizontal edit-profile-form" autocomplete="off">
                        @if (ServerAppConfig.IsSelfHosted)
                        {
                            <div class="form-group no-padding">
                                <label class="label-panel text-right app-textbox-label">[[[Username]]]</label>
                                <div class="col-sm-5 col-xs-12 group-list">
                                    <input class="form-control disable-content" disabled="disabled" id="user-username" name="user-username" type="text" value="@userDetail.Username" autocomplete="off">
                                </div>
                            </div>
                        }
                        <div class="form-group no-padding line-spacing">
                            <label class="label-panel text-right app-textbox-label">[[[First Name]]]</label>
                            <div class="col-sm-5 col-xs-12 group-list">
                                <input class="form-control disable-content" disabled="disabled" id="user-firstname" name="user-firstname" type="text" value="@userDetail.FirstName" autocomplete="off">
                            </div>
                        </div>
                        <div class="form-group no-padding line-spacing">
                            <label class="label-panel text-right app-textbox-label">
                                [[[Last name]]]
                            </label>
                            <div class="col-sm-5 col-xs-12 group-list">
                                <input class="form-control disable-content" disabled="disabled" id="user-lastname" name="user-lastname" type="text" value="@userDetail.LastName" autocomplete="off">
                            </div>
                        </div>
                        <div class="form-group no-padding line-spacing">
                            <label class="label-panel text-right app-textbox-label">[[[Email]]] </label>
                            <div class="col-sm-5 col-xs-12 group-list">
                                <input class="form-control disable-content" disabled="disabled" id="user-email" name="user-email" type="text" value="@(userDetail.CanShowEmail ? userDetail.Email : string.Empty)" autocomplete="off">
                            </div>
                        </div>
                        <div class="form-group no-padding line-spacing">
                            <label class="label-panel text-right app-textbox-label">[[[Phone]]]</label>
                            <div class="col-sm-5 col-xs-12 group-list">
                                <input class="form-control disable-content" disabled="disabled" id="user-phonenumber" name="user-phonenumber" type="text" value="@userDetail.ContactNumber" autocomplete="off">
                            </div>
                        </div>
                    </form>
                </div>
                <div id="edit-button" class="col-sm-4 col-xs-12 no-padding">
                    <span class="bg-info" id="id-account-link">
                        [[[Update these details through your]]]
                        <a href="@idpProfileUrl" id="edit-link"> @GlobalAppSettings.BrandingDisplayName [[[Account]]]</a>
                    </span>
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4 col-lg-3 no-padding" id="message">
                    <h5 id="success-message"></h5>
                </div>
            </div>
            @if (userDetail.DirectoryType != DirectoryType.Local)
            {
                if (ServerAppConfig.IsSelfHosted)
                {
                    <div id="azure-user-info" class="col-xs-12 no-padding">*[[[ Editing user profile except the picture is not currently supported for]]] Azure Active Directory, Windows Active Directory, Office 365, database, OAuth [[[and]]] OpenID Connect [[[accounts]]]</div>
                }
                else
                {
                    <div id="azure-user-info" class="col-xs-12 no-padding">*[[[ Editing user profile except the picture is not currently supported for]]] Azure Active Directory, Office 365 [[[and]]] database [[[accounts.]]]</div>
                }
            }
            <div class="profile-section profile-section-second-div col-lg-12 col-md-12 col-sm-12 col-xs-12 no-padding admin-page-body">
                <div id="edit-profile-form-div" class="col-sm-6 col-xs-12 no-padding margin-top10">
                    <form class="form-horizontal edit-profile-form" autocomplete="off">
                        <div class="form-group no-padding line-spacing" id="group-div">
                            <label class="label-panel text-right app-textbox-label">
                                [[[Groups]]]
                            </label>
                            <div class="col-sm-5 col-xs-12 group-list">
                                @{
                                    for (var group = 0; group < ViewBag.GroupList.Count; group++)
                                    {
                                        <div id="groups" class="content-size" title="@ViewBag.GroupList[group].Name" data-html="false" data-container="body" data-toggle="tooltip" data-placement="auto top">
                                            @ViewBag.GroupList[group].Name
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </form>
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4 col-lg-3 no-padding" id="message">
                    <h5 id="success-message"></h5>
                </div>
            </div>
            @await Html.PartialAsync("_UserNotificationPreference")
        </div>
    </div>
    <input type="hidden" id="image" value="" />
    <span id="baseurl" data-url="@Url.Action("Index", "Home")"></span>
    @await Html.PartialAsync("_ProfilePictureUploadBox", globalAppSettings.SystemSettings.CDNLink)
}