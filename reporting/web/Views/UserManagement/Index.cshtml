@using System.Runtime.InteropServices;

@{
    var globalAppSettings = _globalAppSettings;
    var reportServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    ViewBag.Title = "[[[Users List]]] - " + globalAppSettings.SystemSettings.OrganizationName;
    ViewBag.HelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.ManageUsers);
    var isAzureApplication = ServerAppConfig.IsAzureApplication;
    var enableWindowsAD = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
    var isEmailRequired = globalAppSettings.SystemSettings.IsEmailRequired;
}

@section scripts{
 <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/user-management-module.css" />
		<script asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/user-management.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/user-management-module.min.css" />
		<script asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/user-management.min.js"></script>
    </environment>

    <script>
        var checkMailSettingUrl = "@Url.Action("checkmailsettingsexist", "Administration")";
        var postactionUrl = "@Url.Action("postaction", "UserManagement")";
        var isPresentEmailId = "@Url.Action("IsPresentEmailId", "UserManagement")";
        var isUsernameExistsUrl = "@Url.Action("IsUsernameExists", "UserManagement")";
        var updateUserIntoGroupUrl = "@Url.Action("UpdateUserIntoGroup", "UserManagement")";
        var checkGroupnameUrl = "@Url.Action("CheckGroupname", "Group")";
        var getAddUserInGroupDialogUrl = "@Url.Action("GetAddUserInGroupDialog", "UserManagement")";
        var saveUserIntoGroupUrl = "@Url.Action("SaveUserIntoGroup", "UserManagement")";
        var avatarUrl = "@Url.Action("Avatar", "UserManagement")";
        var getAllActiveGroupListUrl = "@Url.Action("GetAllActiveGroupList", "UserManagement")";
        var deleteFromUserListUrl = "@Url.Action("DeleteFromUserList", "UserManagement")";
        var userPageUrl = "@Url.Action("Index", "UserManagement")";
        var saveSelectedCSVUserUrl = "@Url.Action("SaveSelectedCSVUser", "UserManagement")";
        var deleteSingleFromUserListUrl = "@Url.Action("DeleteSingleFromUserList", "UserManagement")";

        var getResultDataUrl = "@Url.Action("GetUserDataForImportFromDatabase", "UserManagement")";
        var isEmailRequired = "@isEmailRequired";

    </script>
    <script>
        window.data = JSON.parse(@Html.Raw(Json.Serialize(ViewBag.users)));
    </script>
    <script type="text/javascript">
        function selectItems(e) {
            var parentRow = $(e.event.currentTarget.parentNode).parents(".user-row-details");
            $(parentRow).hasClass('user-table-row-selected') ? $(parentRow).removeClass('user-table-row-selected') : $(parentRow).addClass("user-table-row-selected");
            ($(".grid-view-table").find(".user-table-row-selected").length > 0) ? $("#add-user-in-group").fadeIn("slow") : $("#add-user-in-group").fadeOut("slow");
        }

    </script>

    <script type="text/x-jsrender" id="user-profile-template">
        <a class="item-name grid-content" title="{{:DisplayName}}" data-toggle="tooltip" href="@Url.Action("ViewProfile", "UserManagement")?id={{:UserId}}">{{:DisplayName}}</a>

        {{if DirectoryType == @((int)DirectoryType.AzureAD)}}
        <span class="su su-azure-ad grid-directory-icon"> </span>
        {{else DirectoryType == @((int)DirectoryType.ExternalDatabase)}}
        <span class="su su-datasource grid-directory-icon"> </span>
        {{else DirectoryType == @((int)DirectoryType.WindowsAD)}}
        <span class="su su-windows-ad grid-directory-icon"> </span>
        {{else DirectoryType == @((int)DirectoryType.OAuth2)}}
        <span class="su su-oauth grid-directory-icon"><span class="su su-oauth path1"></span><span class="su su-oauth path2"></span><span class="su su-oauth path3"></span></span>
        {{else DirectoryType == @((int)DirectoryType.OpenIDConnect)}}
        <span class="su su-openid grid-directory-icon"> </span>
        {{else DirectoryType == @((int)DirectoryType.JWTSSO)}}
        <span class="su su-single-sign-on grid-directory-icon"> </span>
        {{/if}}
    </script>
    <script type="text/x-jsrender" id="user-name-template">
        <span class="grid-content" title="{{:Username}}" data-toggle="tooltip">{{:Username}}</span>
    </script>
    <script type="text/x-jsrender" id="user-email-template">
        <span class="grid-content" title="{{:Email}}" data-toggle="tooltip">{{:CanShowEmail ? Email : ""}}</span>
    </script>
    <script type="text/x-jsrender" id="status-description-template">
        {{if StatusDescription=="Active"}}
        [[[Active]]]
        {{else StatusDescription== "Inactive"}}
        [[[Inactive]]]
        {{/if}}
    </script>
    <script type="text/x-jsrender" id="email-verification-template">
        {{if IsActivated}}
        [[[Completed]]]
        {{else}}
        [[[Pending]]]
        {{/if}}
    </script>
    <script type="text/x-jsrender" id="itemname-header">
        <div class="item-name">[[[Name]]]</div>
    </script>
    <script type="text/x-jsrender" id="username-header">
        <div class="user-name">[[[Username]]]</div>
    </script>
    <script type="text/x-jsrender" id="email-header">
        <div class="item-header">[[[Email Address]]]</div>
    </script>
    <script type="text/x-jsrender" id="status-header">
        <div class="item-header">[[[Status]]]</div>
    </script>
    <script type="text/x-jsrender" id="email-verification-header">
        <div class="item-header">[[[Email Verification]]]</div>
    </script>
    <script type="text/x-jsrender" id="options">
        <div class="user-hover-options" data-content="{{:Email}}">
            <a href="@Url.Action("userpermission", "permission")?userId={{:UserId}}" title="[[[Manage Permissions]]]" data-toggle="tooltip">
                <i class="su su-manage-permission"></i>
            </a>
            <a href="@Url.Action("ViewProfile", "UserManagement")?id={{:UserId}}" title="[[[View]]]" data-toggle="tooltip">
                <i class="su su-eye"></i>
            </a>
            {{if Email == "@ViewBag.LoggedUser"}}
            <a href="javascript:void(0);" title="[[[It's You]]]" data-toggle="tooltip" data-content="{{:UserId}}" data-email="{{:Email}}">
                <i class="su su-delete disabled-icon-color"></i>
            </a>
            {{else}}
            <a class="delete-class" href="javascript:void(0);" title="[[[Remove Access]]]" data-toggle="tooltip" data-email="{{:Email}}" data-content="{{:UserId}}">
                <i class="su su-delete"></i>
            </a>
            {{/if}}
        </div>
    </script>

    <script type="text/javascript">
        $(function () {
            GridLocalization();
            $("#search-users").val("");
            var data = ej.DataManager({
                url: "@Url.Action("GetAllUserList", "UserManagement")",
                adaptor: new ej.UrlAdaptor()
            });

            $("#user_grid").ejGrid({
                dataSource: data,
                gridLines: ej.Grid.GridLines.None,
                allowPaging: true,
                allowSorting: true,
                allowSearching: true,
                allowSelection: true,
                allowFiltering: true,
                pageSettings: { pageSize: 20 },
                filterSettings: { filterType: "menu" },
                selectionType: ej.Grid.SelectionType.Multiple,
                selectionSettings: { selectionMode: ["row"] },
                enableRowHover: true,
                enableAltRow: false,
                rowDataBound: function () {
                    var height = $(".e-gridcontent").height();
                    if (height != null) {
                        rowBound();
                    }
                },
                dataBound: function (args) {
                    $('[data-toggle="tooltip"]').tooltip();
                },
                rowSelecting: function (e) {
                    this.multiSelectCtrlRequest = true;
                },
                rowSelected: "fnUserRowSelected",
                recordClick: "fnUserRecordClick",
                load: "fnOnUserGridLoad",
                actionBegin: "fnOnUserGridActionBegin",
                actionComplete: "fnOnUserGridActionComplete",
                columns: [
                    {
                        template: true,
                        allowSorting: true,
                        templateID: "#user-profile-template",
                        headerText: "[[[Name]]]",
                        width: 115,
                        headerTemplateID: "#itemname-header",
                        field: "DisplayName",
                        type: "string"
                    },
                    {
                        field: "Username",
                        templateID: "#user-name-template",
                        headerText: "[[[Username]]]",
                        width: 115,
                        headerTemplateID: "#username-header",
                        type: "string"
                    },
                    {
                        field: "Email",
                        templateID: "#user-email-template",
                        headerText: "[[[Email Address]]]",
                        headerTemplateID: "#email-header",
                        type: "string",
                        width: 155
                    },
                    {
                        field: "StatusDescription",
                        headerText: "[[[Status]]]",
                        headerTemplateID: "#status-header",
                        templateID: "#status-description-template",
                        width: 80,
                        allowFiltering: false
                    },
                    {
                        field: "IsActivated",
                        headerText: "[[[Email Verification]]]",
                        headerTemplateID: "#email-verification-header",
                        templateID: "#email-verification-template",
                        width: 80,
                        allowFiltering: false
                    },
                    {
                        template: true,
                        allowSorting: false,
                        headerText: "[[[Actions]]]",
                        templateID: "#options",
                        width: 75,
                        allowFiltering: false
                    }
                ]

            });
            });
    </script>
}

@section MainSection{
    @await Html.PartialAsync("_UserMenu")

    <div id="base-container" class="col-xs-12 admin-page-container ">
        <div class="col-lg-12 admin-page-header">
            <div class="col-xs-12 no-padding" id="user-title">
                <h1 class="pull-left col-lg-6 no-padding page-title">
                    <input type="hidden" id="user-count-text" value="@ViewBag.UserCount">
                    [[[USERS]]] (<span id="user-count" value="@ViewBag.UserCount">@ViewBag.UserCount</span>)
                </h1>

                <ul class="pull-right col-lg-6 no-margin no-padding" id="user-management-options">
                    <li class="dropdown no-padding">
                        @if (new DeviceDetection(Context).IsMobile)
                        {
                            <button class="primary-button" id="new-user-dropdown" title="[[[Add new user]]]" onclick="onUserAddDialogOpen()">
                                [[[New User]]]
                            </button>
                        }
                        else
                        {
                            <button class="dropdown-toggle primary-button" data-toggle="dropdown" id="new-user-dropdown" title="[[[Add new user]]]">
                                <span>[[[New User]]] </span>
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu add-user-dropdown multi-level" role="menu" id="dropdown-options">
                                <li id="create-user" title="[[[Add new user]]]" onclick="onUserAddDialogOpen()">
                                    <a href="javascript:void(0)" title="[[[Add user]]]" data-toggle="tooltip" data-placement="top">
                                        <i class="su su-user-add"> </i>
                                        <span>[[[Add User]]]</span>
                                    </a>
                                </li>
                                <li>
                                    <a href="@Url.Action("UploadFileFormAction", "UserManagement")" title="[[[Import users from CSV]]]" data-toggle="tooltip" data-placement="top">
                                        <i class="su su-download"> </i>
                                        <span>[[[Import from CSV]]]</span>
                                    </a>
                                </li>
                                @if (ServerAppConfig.IsSelfHosted && !isAzureApplication && enableWindowsAD)
                                {
                                    <li>
                                        <a class="dropdown-toggle" href="@Url.Action("ActiveDirectoryUserImport", "UserManagement")" title="[[[Import users from Active Directory]]]" data-toggle="tooltip" data-placement="top">
                                            <i class="su su-windows-ad"> </i>
                                            <span>[[[Import from Active Directory]]]</span>
                                        </a>
                                    </li>
                                }
                                <li>
                                    <a class="dropdown-toggle" href="@Url.Action("azureaduserimport", "usermanagement")" title="[[[Import users from Azure AD]]]" data-toggle="tooltip" data-placement="top">
                                        <i class="su su-azure-ad"> </i>
                                        <span>[[[Import from Azure AD]]]</span>
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-toggle" href="@Url.Action("GetUserDataForImportFromDatabase", "usermanagement")" title="[[[Import users from Database]]]" data-toggle="tooltip" data-placement="top">
                                        <i class="su su-datasource"> </i>
                                        <span>[[[Import from Database]]]</span>
                                    </a>
                                </li>
                            </ul>
                        }
                    </li>

                    @if (((ViewBag.ActiveDirectory != null && ServerAppConfig.IsSelfHosted) && ViewBag.AzureAD != null) || ((ViewBag.ActiveDirectory != null && ServerAppConfig.IsSelfHosted) && ViewBag.CustomDatabaseUserCount != null) || (ViewBag.AzureAD != null && ViewBag.CustomDatabaseUserCount != null))
                    {
                        <li class="dropdown no-padding">
                            <button class="dropdown-toggle primary-button" data-toggle="dropdown" id="synchronize-dropdown" title="[[[Synchronize Users]]]">
                                <span>[[[Synchronize]]] </span>
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu sync-user-dropdown multi-level" role="menu" id="dropdown-options">
                                @if (ViewBag.ActiveDirectory != null && ServerAppConfig.IsSelfHosted && !isAzureApplication)
                                {
                                    <li>
                                        <a class="dropdown-toggle" href="@Url.Action("SynchronizeUsers", "UserManagement")" data-toggle="tooltip" data-placement="left" title="[[[Synchronize users with Active Directory]]]">
                                            <i class="su su-windows-ad"> </i>
                                            <span>[[[Active Directory Synchronization]]]</span>
                                        </a>
                                    </li>
                                }
                                @if (ViewBag.AzureAD != null)
                                {
                                    <li>
                                        <a class="dropdown-toggle" href="@Url.Action("SynchronizeAzureUsers", "UserManagement")" data-toggle="tooltip" data-placement="left" title="[[[Synchronize users with Azure AD]]]">
                                            <i class="su su-azure-ad"> </i>
                                            <span>[[[Azure AD Synchronization]]]</span>
                                        </a>
                                    </li>
                                }
                                @if (ViewBag.CustomDatabaseUserCount != null)
                                {
                                    <li>
                                        <a class="dropdown-toggle" href="@Url.Action("SynchronizeCustomDatabaseUsers", "UserManagement")" data-toggle="tooltip" data-placement="left" title="[[[Synchronize users with Custom Database]]]">
                                            <i class="su su-datasource"> </i>
                                            <span>[[[Database Synchronization]]]</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </li>

                    }
                    else
                    {
                        if (ViewBag.ActiveDirectory != null && ServerAppConfig.IsSelfHosted && !isAzureApplication)
                        {
                            <li>
                                <a href="@Url.Action("SynchronizeUsers", "UserManagement")" class="link-button synchronize-users" title="[[[Synchronize users with Active Directory]]]" data-toggle="tooltip" data-placement="left">[[[Active Directory Synchronization]]]</a>
                            </li>
                        }
                        if (ViewBag.AzureAD != null)
                        {
                            <li>
                                <a href="@Url.Action("SynchronizeAzureUsers", "UserManagement")" class="link-button synchronize-azure-users" title="[[[Synchronize users with Azure AD]]]" data-toggle="tooltip" data-placement="left">[[[Azure AD Synchronization]]]</a>
                            </li>
                        }
                        if (ViewBag.CustomDatabaseUserCount != null)
                        {
                            <li>
                                <a href="@Url.Action("SynchronizeCustomDatabaseUsers", "UserManagement")" class="link-button synchronize-database-users" title="[[[Synchronize users with Custom Database]]]" data-toggle="tooltip" data-placement="left">[[[Database Synchronization]]]</a>
                            </li>
                        }
                    }
                    <li class="flying-add hide" id="add-user-in-group">
                        <button class="critical-action-button user-delete-button" title="[[[Delete selected users]]]" data-log-user="@ViewBag.LoggedUser" id="delete-user">[[[Delete User]]]</button>
                        <button class="secondary-button user-add-group" title="[[[Assign a group to selected users]]]">[[[Assign Group]]]</button>
                    </li>
                </ul>
            </div>
        </div>

        <div id="user-list-container" class="list col-xs-12 admin-page-body">
            <div id="search-area" class="pull-right">
                <input type="text" class="pull-left" id="search-users" placeholder="[[[Search users]]]" />
                <span class="su su-inner-close close-icon pull-left" id="clear-search" title="[[[Clear search]]]"></span>
                <span class="su su-search search-user pull-left" title="[[[Search]]]"></span>
            </div>
            <div class="col-xs-12 no-padding ">
                <div id="user_grid">
                </div>
            </div>

            @if (ViewBag.AzureADUserCount > 0)
            {
                <div id="azure-ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-azure-ad"> </span> - [[[Azure AD User]]]</div>
            }
            @if (ViewBag.DatabaseUserCount > 0)
            {
                <div id="database-indication" class="ad-azure-indication col-lg-12"><span class="su su-datasource"> </span> - [[[Database User]]]</div>
            }
            @if (ServerAppConfig.IsSelfHosted && ViewBag.AdUserCount > 0)
            {
                <div id="ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-windows-ad"> </span> - [[[Windows AD User]]]</div>
            }
            @if (ViewBag.OAuthUserCount > 0)
            {
                <div id="ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-oauth"><span class="su su-oauth path1"></span><span class="su su-oauth path2"></span><span class="su su-oauth path3"></span></span> - [[[OAuth User]]]</div>
            }
            @if (ViewBag.OpenIdUserCount > 0)
            {
                <div id="ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-openid"> </span> - [[[OpenID Connect User]]]</div>
            }
            @if (ViewBag.JWTSSO > 0)
            {
                <div id="ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-single-sign-on"> </span> - [[[JWT SSO User]]]</div>
            }
        </div>
    </div>

    @await Html.PartialAsync("../UserManagement/_UserAddDialog", globalAppSettings)
    @await Html.PartialAsync("../UserManagement/_MultipleUserDeleteDialog")
    @await Html.PartialAsync("../UserManagement/_SingleUserDeleteDialog")
    @await Html.PartialAsync("../UserManagement/_LimitUserCreation")
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="~/js/localizationcontent.js?c=@System.Globalization.CultureInfo.CurrentCulture"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="~/js/localizationcontent.js?c=@System.Globalization.CultureInfo.CurrentCulture"></script>
    </environment>
}