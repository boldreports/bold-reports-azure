<!DOCTYPE html>
@using Newtonsoft.Json
@using System.IO
@using Syncfusion.Server.Base.Helpers
@using System.Web;

@{
    var globalAppSettings = _globalAppSettings;
    Layout = null;
    var itemDetails = ViewBag.itemDetails;
    var token = ViewBag.AccessToken;
    var itemLocation = ViewBag.itemLocation;
    var itemId = itemDetails.Id;
    var itemName = HttpUtility.HtmlDecode(itemDetails.Name);
    var description = HttpUtility.HtmlDecode(itemDetails.Description);
    var permissionDetails = ViewBag.permissionDetails;
    var CanWrite = permissionDetails != null ? permissionDetails[0].CanWrite : false;
    var reportServerApiUrl = new ReportServerApiEndPoints(globalAppSettings).ReportServerApiUrl();
    var xmlContent = File.ReadAllText(itemLocation);
    var reportServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
}
<html lang="en" style="height:100%;width:100%">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@itemName - Edit Dataset As XML - @globalAppSettings.SystemSettings.OrganizationName</title>
    <link rel="icon" href="@Url.Content(globalAppSettings.SystemSettings.FavIcon)" onerror="if (this.href != '~/content/images/application/favicon.png') this.href = '~/content/images/application/favicon.png';" />
    <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/report-xml-editor.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/report-xml-editor.min.css")" crossorigin="anonymous" />
    <link href="@reportServerResourceUrl/cdn/css/essentialjs/ej2-base.css" rel="stylesheet" />
    <link href="@reportServerResourceUrl/cdn/css/essentialjs/ej2-buttons.css" rel="stylesheet" />
    <link href="@reportServerResourceUrl/cdn/css/essentialjs/ej2-popups.css" rel="stylesheet" />
    <link href="@reportServerResourceUrl/cdn/css/essentialjs/ej2-navigations.css" rel="stylesheet" />
    <link href="@reportServerResourceUrl/cdn/css/essentialjs/ej2-notifications.css" rel="stylesheet" />
    <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-xml-editor.min.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-xml-editor.min.js")" crossorigin="anonymous"></script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript" src="@reportServerResourceUrl/cdn/scripts/essentialjs/common/ej2-base.min.js"></script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript" src="@reportServerResourceUrl/cdn/scripts/essentialjs/ej2-buttons.min.js"></script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript" src="@reportServerResourceUrl/cdn/scripts/essentialjs/ej2-popups.min.js"></script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript" src="@reportServerResourceUrl/cdn/scripts/essentialjs/ej2-navigations.min.js"></script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript" src="@reportServerResourceUrl/cdn/scripts/essentialjs/ej2-notifications.min.js"></script>
</head>
<body>
    <div id="toolbar"></div>
    <div id="editor-container">
        <div id="editor"></div>
    </div>
    <div id="toast-message-container"></div>

    <script nonce="@Context.Items["ScriptNonce"]">
        ejs.popups.createSpinner({
            target: document.getElementById('editor-container'),
            cssClass: 'e-spin-overlay'
        });
        var originalXmlContent = @Html.Raw(JsonConvert.SerializeObject(xmlContent));

        var editor = CodeMirror(document.getElementById("editor"), {
            mode: "xml",
            lineNumbers: true,
            tabSize: 1,
            autofocus: true,
            dragDrop: false,
            cursorBlinkRate: 0,
            cursorScrollMargin: 5,
            inputStyle: "textarea",
            scrollbarStyle: "native",
            autoCloseBrackets: true,
            value: @Html.Raw(JsonConvert.SerializeObject(xmlContent)),
            viewportMargin: 100,
            extraKeys: {
                "Ctrl-F": "findPersistent",
                "Ctrl-G ": "findNext",
                "Shift-Ctrl-G": "findPrev",
                "Shift-Ctrl-F": "replace",
                "Shift-Ctrl-R": "replaceAll",
                "Ctrl-Z": "undo",
                "Ctrl-Y": "redo"
            }
        });

        var toolbar = new ej.navigations.Toolbar({
            items: [
                {
                    text: "[[[Undo]]]",
                    tooltipText: "[[[Undo]]]",
                    prefixIcon: "e-icons e-undo",
                    id: "undo",
                    click: handleUndo
                },
                {
                    text: "[[[Redo]]]",
                    tooltipText: "[[[Redo]]]",
                    prefixIcon: "e-icons e-redo",
                    id: "redo",
                    click: handleRedo
                },
                {
                    type: "Separator"
                },
                {
                    text: "[[[Search]]]",
                    tooltipText: "[[[Search]]]",
                    prefixIcon: "e-icons e-search",
                    id: "search",
                    click: handleSearch
                },
                {
                    text: "[[[Replace]]]",
                    tooltipText: "[[[Replace]]]",
                    prefixIcon: "e-icons e-replace",
                    id: "replace",
                    click: handleReplace
                },
                {
                    type: "Separator"
                },
                {
                    text: "[[[Publish]]]",
                    tooltipText: "[[[Publish]]]",
                    id: "publish",
                    align: "Right",
                    click: handlePublish
                }
            ]
        });

        toolbar.appendTo("#toolbar");
        toolbar.enableItems([0, 1], false);

        window.addEventListener("beforeunload", function (e) {
            var editedXmlContent = editor.getValue();
            if (originalXmlContent !== editedXmlContent) {
                var confirmationMessage = "[[[You have made modifications. Do you want to close without publishing?]]]";
                (e || window.event).returnValue = confirmationMessage;
                return confirmationMessage;
            }
        });

        function handleUndo() {
            editor.execCommand("undo");
        }

        function handleRedo() {
            editor.execCommand("redo");
        }

        function handleSearch() {
            editor.execCommand("findPersistent");
        }

        function handleReplace() {
            editor.execCommand("replace");
        }

        function handlePublish() {
            editor.setOption("readOnly", "nocursor");
            toolbar.disable(true);
            ej.popups.showSpinner(document.getElementById('editor-container'));

            var reportServerApiUrl = "@reportServerApiUrl";
            var editedXmlContent = editor.getValue();
            var parser = new DOMParser();
            var xmlDoc = parser.parseFromString(editedXmlContent, 'application/xml');
            var dataSourceMappingInfoArray = [];
            var xmlDataSourceDoc= xmlDoc.getElementsByTagName('DataSourceReference');
            if(xmlDataSourceDoc && xmlDataSourceDoc.length > 0){
            var dataSourceRefArray =  xmlDataSourceDoc[0].textContent.split('/');
            var name = dataSourceRefArray[0];
            var dataSourceId = dataSourceRefArray[1];
            var dataSourceMappingInfoArray = [{
                "Name": name,
                "DataSourceId": dataSourceId,
                "DataSourceName": name
            }];
            }

            var payload = {
                ItemId: "@itemId",
                DataSetName: decodeHtmlAsString("@itemName"),
                Name: decodeHtmlAsString("@itemName"),
                Description: decodeHtmlAsString("@description"),
                VersionComment: "[[[Dataset edited as XML]]]",
                DataSourceMappingInfo: dataSourceMappingInfoArray,
                ItemContent: btoa(editedXmlContent),
            };

            $.ajax({
                url: reportServerApiUrl + '/v1.0/reports/datasets',
                type: 'PUT',
                data: JSON.stringify(payload),
                headers: {
                    'Authorization': "@token"
                },
                contentType: 'application/json',
                success: function (data) {
                    if (data && data.ApiStatus === true) {
                        originalXmlContent = editedXmlContent;
                        alertMessage(true);
                    }
                    else {
                        alertMessage(false);
                    }
                },
                error: function (xhr, status, error) {
                    alertMessage(false);
                },
                complete: function () {
                    ej.popups.hideSpinner(document.getElementById('editor-container'));
                    editor.setOption("readOnly", false);
                    toolbar.disable(false);
                }
            });
        }

        function alertMessage(status) {
            var toastMessage;
            var className;
            var toastTitle;
            if (status) {
                toastMessage = "[[[Dataset has been published successfully]]]";
                className = 'e-toast-success';
                toastTitle = "[[[Success!]]]";
            } else {
                toastMessage = "[[[An error occurred while publishing the dataset.]]]";
                className = 'e-toast-danger';
                toastTitle = "[[[Error!]]]"
            }
            var toast = new ejs.notifications.Toast({
                title: toastTitle,
                content: toastMessage,
                target: document.body,
                cssClass: className,
                timeOut: 3000,
                position: { X: 'Right', Y: 'Top' },
                showCloseButton: true,
                newestOnTop: true,
                animation: {
                    hide: { effect: 'SlideRightOut' },
                    show: { effect: 'SlideRightIn' }
                }
            });
            toast.appendTo('#toast-message-container');
            toast.show();
        }

        editor.on("change", function () {
            if (editor.historySize().undo === 0) {
                toolbar.enableItems([0], false);
            } else {
                toolbar.enableItems([0], true);
            }
            if (editor.historySize().redo === 0) {
                toolbar.enableItems([1], false);
            } else {
                toolbar.enableItems([1], true);
            }
        });

    </script>
    <style>
        #editor-container {
            margin-top: 40px;
            height: calc(100vh - 40px);
        }

        #editor {
            height: 100%;
            width: 100vw;
            overflow: auto;
        }

        body {
            margin: 0;
            padding: 0;
            overflow: auto;
        }

        .CodeMirror {
            height: calc(100vh - 40px);
            width: 100vw;
        }

        #toolbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw !important;
            z-index: 9999;
            border: 1px solid #e5e5e5;
        }

        .e-icons.e-undo:before {
            content: "\e341";
        }

        .e-icons.e-redo:before {
            content: "\e354";
        }

        .e-icons.e-search:before {
            content: "\e980";
        }

        .e-icons.e-replace:before {
            content: "\e359";
        }

        #publish {
            background-color: #0565ff;
            padding: 4px 8px;
            transition: background-color 0.3s ease;
            border-radius: 4px;
            margin: 0px;
        }

            #publish span {
                color: #fff;
            }

            #publish:hover {
                background-color: #5eb8ff;
            }

                #publish:hover span {
                    color: #fff;
                }
    </style>
</body>
</html>