<!DOCTYPE html>
@using System.Globalization;
@using Syncfusion.Server.Base.Helpers
@using System.Web;

@{
    Layout = null;
    var reportPath = string.Empty;
    var categoryName = string.Empty;
    var reportName = string.Empty;
    var datasourceName = string.Empty;
    var globalAppSettings = _globalAppSettings;
    var baseUrl = globalAppSettings.SystemSettings.BaseUrl;
    var reportServerApiUrl = new ReportServerApiEndPoints(globalAppSettings).ReportServerApiUrl();

    if (!string.IsNullOrWhiteSpace(ViewBag.datasourceName))
    {
        datasourceName = HttpUtility.HtmlDecode(ViewBag.datasourceName);
    }
    var language = CultureInfo.CurrentCulture.Name;
    var cdnLink = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var faviconLogo = globalAppSettings.SystemSettings.FavIcon;
    var reportServiceUrl = ServerAppConfig.InternalAppDataServiceUrl;
    var reportServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var reportServiceCdnLink = globalAppSettings.SystemSettings.ReportServiceCdnLink.TrimEnd('/');
    var cdnDomain = GlobalAppSettings.CdnDomain;
    var isDesignerV2Enabled = ViewBag.IsDesignerV2Enabled;
    var description = HttpUtility.HtmlDecode(ViewBag.description);
    var datasetName = HttpUtility.HtmlDecode(ViewBag.datasetName);
}

<html lang="en" style="height:100%;width:100%">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width" />
    @if (ViewBag.datasetName != null)
    {
        <title>@ViewBag.datasetName - [[[Design Dataset]]] - @globalAppSettings.SystemSettings.OrganizationName</title>
    }
    else
    {
        <title>Untitled - [[[Design Dataset]]] - @globalAppSettings.SystemSettings.OrganizationName</title>
    }

    @if (ServerAppConfig.IsSelfHosted)
    {
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/report-designer.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/report-designer.css")" crossorigin="anonymous" />
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/extensions/barcode.reportitem.css" />
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/essentialjs/v2.0/tailwind-light/bold.report-designer.min.css" />
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/designer.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/designer.css")" crossorigin="anonymous" />
            <link rel="stylesheet" asp-append-version="true" href="@ServerAppConfig.CustomFontUrl(globalAppSettings?.SystemSettings?.FontPreference, reportServerResourceUrl)" />
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/report-designer.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/report-designer.min.css")" crossorigin="anonymous" />
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/extensions/barcode.reportitem.css" />
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/essentialjs/v2.0/tailwind-light/bold.report-designer.min.css" />
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/designer.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/designer.min.css")" crossorigin="anonymous" />
            <link rel="stylesheet" asp-append-version="true" href="@ServerAppConfig.CustomFontUrl(globalAppSettings?.SystemSettings?.FontPreference, reportServerResourceUrl)" />
        </environment>
        <environment include="Development,CloudDevelopment">
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-designer.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-designer.js")" crossorigin="anonymous"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-designer.min.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-designer.min.js")" crossorigin="anonymous"></script>
        </environment>
        <environment include="Development,CloudDevelopment">
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/essentialjs/v2.0/bold.reportviewer.min.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/essentialjs/v2.0/bold.reportdesigner.min.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-designer-service.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-designer-service.js")" crossorigin="anonymous"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/barcode.reportitem.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/extension.config.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/qrbarcode.reportitem.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/custombranding.config.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/essentialjs/v2.0/bold.reportviewer.min.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/essentialjs/v2.0/bold.reportdesigner.min.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-designer-service.min.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-designer-service.min.js")" crossorigin="anonymous"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/barcode.reportitem.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/extension.config.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/qrbarcode.reportitem.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/custombranding.config.js"></script>
        </environment>
        <script nonce="@Context.Items["ScriptNonce"]" src="@reportServerResourceUrl/cdn/scripts/localization/querydesigner/ej.localetexts.@string.Concat(language,".js")"></script>
        <script nonce="@Context.Items["ScriptNonce"]" src="@reportServerResourceUrl/cdn/scripts/localization/i18n/ej.culture.@string.Concat(language,".min.js")"></script>
    }
    else
    {
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/report-designer.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/report-designer.css")" crossorigin="anonymous" />
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/report-designer.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/report-designer.min.css")" crossorigin="anonymous" />
        </environment>
        <link href="@reportServiceCdnLink/extensions/barcode.reportitem.css" rel="stylesheet" />
        <link rel="stylesheet" asp-append-version="true" href="@reportServiceCdnLink/cdn/css/essentialjs/v2.0/tailwind-light/bold.report-designer.min.css" />
        <environment include="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/designer.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/designer.css")" crossorigin="anonymous" />
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/designer.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/account-page.css")" crossorigin="anonymous" />
        </environment>
        <environment include="Development,CloudDevelopment">
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-designer.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-designer.js")" crossorigin="anonymous"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-designer.min.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-designer.min.js")" crossorigin="anonymous"></script>
        </environment>
        <environment include="Development,CloudDevelopment">
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/essentialjs/v2.0/bold.reportviewer.min.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/essentialjs/v2.0/bold.reportdesigner.min.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-designer-service.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-designer-service.js")" crossorigin="anonymous"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/barcode.reportitem.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/extension.config.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/qrbarcode.reportitem.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/custombranding.config.js"></script>
        </environment>
        <environment exclude="Development,CloudDevelopment">
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/essentialjs/v2.0/bold.reportviewer.min.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/essentialjs/v2.0/bold.reportdesigner.min.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/report-designer-service.min.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/report-designer-service.min.js")" crossorigin="anonymous"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/barcode.reportitem.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/extension.config.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/qrbarcode.reportitem.js"></script>
            <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/extensions/custombranding.config.js"></script>
        </environment>
        <script nonce="@Context.Items["ScriptNonce"]" type='text/javascript' src='@reportServiceCdnLink/extensions/extension.config.js'></script>
        <script nonce="@Context.Items["ScriptNonce"]" type='text/javascript' src='@reportServiceCdnLink/extensions/qrbarcode.reportitem.js'></script>
        <script nonce="@Context.Items["ScriptNonce"]" type='text/javascript' src='@reportServiceCdnLink/extensions/barcode.reportitem.js'></script>
    }

    <link rel="icon" href="@faviconLogo" onerror="if (this.href !== null && this.href.toLowerCase() !== '@cdnLink/cdn/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon') this.href = '@cdnLink/images/application/@ServerAppConfig.AppSettings.AppBranding.Identifier/@IconFileNames.Favicon';" />

    @if (!ServerAppConfig.IsCustomThemeForMenu)
    {
        <style>
            :root {
                --nav-menu-bg-color: var(--white);
                --nav-menu-text-color: var(--primary-black);
                --nav-menu-text-sec-color: var(--grey-700);
                --nav-menu-content-color: var(--grey-800);
                --nav-menu-active-color: var(--blue-lighter);
                --nav-menu-active-text-color: var(--blue);
                --nav-menu-active-sec-color: var(--blue);
                --nav-menu-active-content-color: var(--grey-800);
                --nav-menu-hover-color: var(--grey-300);
                --nav-menu-hover-text-color: var(--primary-black);
                --nav-menu-hover-text-sec-color: var(--grey-700);
                --nav-menu-hover-content-color: var(--grey-800);
                --nav-menu-create-icon-bgcolor: var(--blue);
                --nav-menu-separtor-icon-color: var(--grey-400);
                --item-menu-hover-bg-color: var(--white);
                --item-menu-hover-border-color: var(--blue);
                --item-menu-section-bg-color: var(--blue-lighten);
                --item-menu-bg-color: var(--nav-menu-bg-color);
                --item-menu-title-color: var(--nav-menu-text-color);
                --item-menu-descrip-color: var(--nav-menu-text-sec-color);
                --item-menu-hover-title-color: var(--nav-menu-hover-text-color);
                --item-menu-hover-descrip-color: var(--nav-menu-hover-text-sec-color);
                --nav-notification-menu-bg-color: var(--nav-menu-bg-color);
                --nav-notification-items-hover-bg-color: var(--nav-menu-hover-color);
                --nav-notification-heading-text-color: var(--nav-menu-text-color);
                --nav-notification-sub-heading-text-color: var(--nav-menu-text-sec-color);
                --nav-notification-content-text-color: var(--nav-menu-content-color);
                --nav-notification-time-text-color: var(--nav-menu-text-sec-color);
                --nav-notification-content-hover-text-color: var(--nav-menu-hover-content-color);
                --nav-notification-time-hover-text-color: var(--nav-menu-hover-text-sec-color);
            }
        </style>
    }
    else
    {
        <style>
            :root {
            @ServerAppConfig.ThemeStyle
                --item-menu-bg-color: var(--nav-menu-bg-color);
                --item-menu-section-bg-color: var(--nav-menu-bg-color);
                --item-menu-title-color: var(--nav-menu-text-color);
                --item-menu-descrip-color: var(--nav-menu-text-sec-color);
                --item-menu-hover-bg-color: var( --nav-menu-hover-color);
                --item-menu-hover-border-color: var( --nav-menu-hover-color);
                --item-menu-hover-title-color: var(--nav-menu-hover-text-color);
                --item-menu-hover-descrip-color: var(--nav-menu-hover-text-sec-color);
                --nav-notification-menu-bg-color: var(--nav-menu-bg-color);
                --nav-notification-items-hover-bg-color: var(--nav-menu-hover-color);
                --nav-notification-heading-text-color: var(--nav-menu-text-color);
                --nav-notification-sub-heading-text-color: var(--nav-menu-text-sec-color);
                --nav-notification-content-text-color: var(--nav-menu-content-color);
                --nav-notification-time-text-color: var(--nav-menu-text-sec-color);
                --nav-notification-content-hover-text-color: var(--nav-menu-hover-content-color);
                --nav-notification-time-hover-text-color: var(--nav-menu-hover-text-sec-color);
            }
        </style>
    }

    <script nonce="@Context.Items["ScriptNonce"]">
        var controlId = 'container';
		var isEditReport = false;
        var designerToken = "@ViewBag.AccessToken";
        var categoryName = decodeHtmlAsString("@categoryName");
        var reportName = decodeHtmlAsString("@reportName");
        var datasetName = decodeHtmlAsString("@datasetName");
        var description = decodeHtmlAsString("@description");
        var isEdit = "@ViewBag.isEdit";
        var datasource = decodeHtmlAsString("@datasourceName");
        var _CryptoAES = window['CryptoJS'];
        var _keyCode = (Math.random() + ' ').substring(2, 10) + (Math.random() + ' ').substring(2, 10);
        var _ivCode = (Math.random() + ' ').substring(2, 10) + (Math.random() + ' ').substring(2, 10);
        var _key = _CryptoAES.enc.Utf8.parse(_keyCode);
        var _iv = _CryptoAES.enc.Utf8.parse(_ivCode);
        isEdit = isEdit.toLowerCase();

		if(isEdit === "true"){
		    isEditReport = true;
        }

        var serviceUrl = "@reportServiceUrl.TrimEnd('/')" + "/api/Designer";
        var isSubmit = true;
		var ctrlId = 'container';

		$(document).ready(function () {
            renderQueryDesigner();

            $(document).on("click", "#btn-item-preview", function () {
                $("#btn-item-design").show();
                $(".design-item").css("display", "block");
                $("#btn-item-preview").hide();
                $(".preview-item").css("display", "none");
            });
            $(document).on("click", "#btn-item-design", function () {
                $("#btn-item-preview").show();
                $(".preview-item").css("display", "block");
                $("#btn-item-design").hide();
                $(".design-item").css("display", "none");
            });
        });

        function renderQueryDesigner() {
            var designerModel = {
                serviceUrl: serviceUrl,
                toolbarSettings: {
                    items: ej.QueryDesigner.ToolbarItems.All & ~ej.QueryDesigner.ToolbarItems.Cancel
                        & ~ej.QueryDesigner.ToolbarItems.Save & ~ej.QueryDesigner.ToolbarItems.InputDataSet
                },
                create: $.proxy(controlInitialization, this),
                toolbarRendering: $.proxy(renderEJ2ToolbarItems , this),
                reportServerUrl: "@reportServerApiUrl",
                serviceAuthorizationToken: designerToken,
                locale: '@language',
                ajaxBeforeLoad: ajaxBeforeSend,
                encryptData: encryptData,
                decryptData: decryptData
            };
            var designer = new boldReportQueryDesigner($('#' + ctrlId), designerModel);
        }

        function controlInitialization(args) {
            var designer = $('#' + ctrlId).data('boldReportQueryDesigner');
            designer.editType = 'shared';
            if (isEditReport) {
                editDataSet(datasetName);
            } else {
                newDataSet(datasource);
            }
        }

        function renderEJ2ToolbarItems(args) {
            if (args.action === 'beforeCreate') {
                args.items.push({
                    GroupName: 'customitems',
                    GroupId: ctrlId + '_custom_group',
                    Items: [
                        {
                            template: getTemplate('save', 'Save and Exit'),
                            align: 'Right',
                            overflow: 'Show',
                            id: ctrlId + '_custom_toolbar_btn_save',
                            htmlAttributes: {
                                id: ctrlId + '_custom_toolbar_save',
                                'aria-label': 'Save and Exit'
                            }
                        },
                        {
                            template: getTemplate('cancel', 'Cancel'),
                            align: 'Right',
                            overflow: 'Show',
                            id: ctrlId + '_custom_toolbar_btn_cancel',
                            htmlAttributes: {
                                id: ctrlId + '_custom_toolbar_cancel',
                                'aria-label': 'Cancel'
                            }
                        }
                    ]
                });
            } else if (args.action === 'onCreate') {
                var saveBtnTag = args.target.find('#' + ctrlId + '_custom_toolbar_btn_save');
                var test = new ejs.buttons.Button({
                    isPrimary: true,
                    cssClass: 'e-medium'
                });
                test.appendTo(saveBtnTag[0]);
                saveBtnTag[0].onclick = $.proxy(this.saveQueryDataSet, this);
                var cancelBtnTag = args.target.find('#' + ctrlId + '_custom_toolbar_btn_cancel');
                var test = new ejs.buttons.Button({
                    cssClass: 'e-medium'
                });
                test.appendTo(cancelBtnTag[0]);
                cancelBtnTag[0].onclick = $.proxy(this.cancelDataSet, this);
            }
        }

        function getTemplate(itemType, btnText) {
            var domElement = ej.buildTag(
                'button.e-reportdesigner-dataset-btn',
                btnText,
                {},
                { id: ctrlId + '_custom_toolbar_btn_' + itemType, type: 'button' });
            return domElement[0].outerHTML;
        }

        function cancelDataSet() {
            window.location.href = '@Url.Action("DataSets", "DataSets")';
        }

        function saveQueryDataSet(event) {
            var queryDesigner = $('#' + ctrlId).data('boldReportQueryDesigner');
            queryDesigner.getDataSet(function (args) {
                doAjaxPost(serviceUrl + '/PostDesignerAction/', JSON.stringify({
                    'designerAction': isEditReport ? 'SaveSharedDataSet' : 'CreateSharedDataSet',
                    'sharedData': ej.ReportUtil.encryptSharedDatasetModel(args.newSharedDataSet, queryDesigner),
                    'name': datasetName,
                    'sharedDataMapping': args.sharedDataMapping,
                    'customData': {
                        'description': description
                    }
                }), {
                    fnction: function (args) {
                        if (args && typeof (args) === 'string' && args.indexOf('Sf_Exception') !== -1) {
                            alertMessage(false)
                        } else {
                            alertMessage(true);
                            if (!isEditReport) {
                                isEditReport = true;
                            }
                        }
                    },
                    indicator: [function () {
                        ejs.popups.showSpinner($('#' + ctrlId + '_div_designerArea')[0]);
                    },
                    function () {
                        ejs.popups.hideSpinner($('#' + ctrlId + '_div_designerArea')[0]);
                    }]
                });
            });
        }

        function _injectKeys(args) {
            if (args && args.headers) {
                args.headers.push({ 'Key': 'keyCode', 'Value': _keyCode });
                args.headers.push({ 'Key': 'ivCode', 'Value': _ivCode });
            }
        }

        function alertMessage(status) {
            var toastMessage;
            var className;
            var toastTitle;
            if (status) {
                if (isEditReport) {
                    toastMessage = "[[[DataSet has been updated successfully]]]";
                } else {
                    toastMessage = "[[[DataSet has been added successfully]]]";
                }
                className = 'e-toast-success';
                toastTitle = "[[[Success!]]]";
            } else {
                if (isEditReport) {
                    toastMessage = "[[[An error occurred to update the dataset]]]";
                } else {
                    toastMessage = "[[[An error occurred to add the dataset]]]";
                }
                className = 'e-toast-danger';
                toastTitle = "[[[Error!]]]";
            }
            var toast = new ejs.notifications.Toast({
                title: toastTitle,
                content: toastMessage,
                target: document.body,
                cssClass: className,
                timeOut: 3000,
                position: { X: 'Right', Y: 'Top' },
                showCloseButton: true,
                newestOnTop: true,
                animation: {
                    hide: { effect: 'SlideRightOut' },
                    show: { effect: 'SlideRightIn' }
                }
            });
            toast.appendTo('#toast-message-container');
            toast.show();
            if (status) {
                setTimeout(cancelDataSet, 3000);
            }
        }

        function newDataSet(selectData) {
            var designer = $('#' + ctrlId).data('boldReportQueryDesigner');
            doAjaxPost(serviceUrl + '/PostDesignerAction/', JSON.stringify({
                'designerAction': ej.ReportUtil.DesignerAction.dataSourceCatalog,
            }), {
                fnction: function (args) {
                    var dataSources = [];
                    for (var index = 0; index < args.length; index++) {
                        var dataSource = ej.ReportUtil.createDataSource();
                        dataSource.ConnectionProperties = null;
                        dataSource.DataSourceReference = args[index].Id;
                        dataSource.Name = args[index].Name;
                        dataSources.push(dataSource);
                    }
                    designer.datasetName = datasetName;
                    designer.newDataSet(selectData, dataSources);
                },
                indicator: [function () {
                    ejs.popups.showSpinner($('#' + ctrlId + '_div_designerArea')[0]);
                },
                function () {
                    ejs.popups.hideSpinner($('#' + ctrlId + '_div_designerArea')[0]);
                }]
            });
        }

        function editDataSet(dataSetName) {
            var queryDesigner = $('#' + ctrlId).data('boldReportQueryDesigner');
            doAjaxPost(serviceUrl + '/PostDesignerAction/', JSON.stringify({
                'designerAction': ej.ReportUtil.DesignerAction.dataSourceCatalog,
            }), {
                fnction: function (args) {
                    var dataSources = [];
                    for (var index = 0; index < args.length; index++) {
                        var dataSource = ej.ReportUtil.createDataSource();
                        dataSource.ConnectionProperties = null;
                        dataSource.DataSourceReference = args[index].Id;
                        dataSource.Name = args[index].Name;
                        dataSources.push(dataSource);
                    }
                    editSharedDataSet(dataSetName, dataSources);
                },
                indicator: [function () {
                    ejs.popups.showSpinner($('#' + ctrlId + '_div_designerArea')[0]);
                },
                function () {
                    ejs.popups.hideSpinner($('#' + ctrlId + '_div_designerArea')[0]);
                }]
            });
        }

        function downloadDataSet() {
            var queryDesigner = $('#' + ctrlId).data('boldReportQueryDesigner');
            queryDesigner.getDataSet(function (args) {
                ej.ReportUtil.doPostBack(serviceUrl + '/PostDesignerAction/', { 'name': args.newSharedDataSet.Name + '.rsd', 'sharedData': JSON.stringify(args.newSharedDataSet) }, queryDesigner);
            });
        }

        function editSharedDataSet(dataSetName, dataSources) {
            var queryDesigner = $('#' + ctrlId).data('boldReportQueryDesigner');
            doAjaxPost(serviceUrl + '/PostDesignerAction/', JSON.stringify({
                'designerAction': ej.ReportUtil.DesignerAction.sharedDataSet,
                'reportInfo': {
                    'dataSetRefer': dataSetName
                }
            }), {
                fnction: function (args) {
                    queryDesigner.datasetName = datasetName;
                    queryDesigner.editDataSet(ej.ReportUtil.decryptDatasetModel(args, queryDesigner), dataSources);
                },
                indicator: [function () {
                    ejs.popups.showSpinner($('#' + ctrlId + '_div_designerArea')[0]);
                },
                function () {
                    ejs.popups.hideSpinner($('#' + ctrlId + '_div_designerArea')[0]);
                }]
            });
        }

        function ajaxBeforeSend(args) {
            _injectKeys(args);
        }

        function _encryptData(plainText) {
            return _CryptoAES.AES.encrypt(
                _CryptoAES.enc.Utf8.parse(plainText),
                _key,
                {
                    keySize: 128 / 8,
                    iv: _iv,
                    mode: _CryptoAES.mode.CBC,
                    padding: _CryptoAES.pad.Pkcs7
                }).toString();
        }

        function _decryptData(cipherText) {
            return _CryptoAES.AES.decrypt(
                cipherText,
                _key,
                {
                    keySize: 128 / 8,
                    iv: _iv,
                    mode: _CryptoAES.mode.CBC,
                    padding: _CryptoAES.pad.Pkcs7
                }).toString(_CryptoAES.enc.Utf8);
        }

        function encryptData(eventArgs) {
            if (eventArgs && eventArgs.data) {
                eventArgs.data = _encryptData(eventArgs.data);
            }
        }

        function decryptData(eventArgs) {
            if (eventArgs && eventArgs.data) {
                eventArgs.data = _decryptData(eventArgs.data);
            }
        }

        function _setRequestHeader(req) {
            if (req) {
                req.setRequestHeader('keyCode', _keyCode);
                req.setRequestHeader('ivCode', _ivCode);
            }
        }

        function doAjaxPost(url, jsonObj, callBack) {
            $.ajax({
                type: 'POST',
                url: url,
                async: true,
                crossDomain: true,
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                data: jsonObj,
                beforeSend: function (req) {
                    req.setRequestHeader('ServerUrl', '@reportServerApiUrl');
                    req.setRequestHeader('serviceAuthorizationToken', designerToken);
                    if (callBack && callBack.indicator && callBack.indicator.length > 0) {
                        ej.ReportUtil.invokeCallBack(callBack.indicator[0], {});
                    }
                    _setRequestHeader(req);
                },
                success: function (data) {
                    if (data && typeof (data.Data) !== 'undefined') {
                        data = data.Data;
                    }
                    var jsonData = data;
                    if (callBack) {
                        if (callBack.indicator && callBack.indicator.length > 0) {
                            ej.ReportUtil.invokeCallBack(callBack.indicator[1], {});
                        }
                        if (callBack.fnction) {
                            ej.ReportUtil.invokeCallBack(callBack.fnction, jsonData);
                        }
                    }
                },
                error: function (msg, textStatus, errorThrown) {
                    if (callBack && callBack.indicator && callBack.indicator.length > 0) {
                        ej.ReportUtil.invokeCallBack(callBack.indicator[1], {});
                    }
                }
            });
        }
    </script>
</head>
<body style="overflow:hidden;position:static;margin:0; padding: 0;height:100%;width:100%">
    <div id="toast-message-container"></div>
    <div id="container" style="height:100%;width:100%"></div>
</body>
</html>