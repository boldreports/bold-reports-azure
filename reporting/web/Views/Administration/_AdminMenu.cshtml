@{
    var model = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var isAdmin = _identityResponse.IsAdmin;
    var scopeList = new List<string>()
{
        SettingsScopes.Accounts.ToString(),
        SettingsScopes.AuthenticationSettings.ToString(),
        SettingsScopes.SiteSettings.ToString(),
        SettingsScopes.ReportSettings.ToString(),
        SettingsScopes.Connectors.ToString(),
        SettingsScopes.Email.ToString(),
        SettingsScopes.EmbedSettings.ToString(),
        SettingsScopes.UserDirectorySettings.ToString(),
        SettingsScopes.ManageLicense.ToString(),
        SettingsScopes.Payments.ToString(),
        SettingsScopes.Subscription.ToString(),
        SettingsScopes.SupportSettings.ToString(),
        SettingsScopes.NotificationSettings.ToString(),
        SettingsScopes.CORSPolicySettings.ToString(),
        SettingsScopes.Security.ToString()
    };
    var canShowAdminMenu = isAdmin || model[SettingsScopes.All] || model.Select(x => x).Where(x => scopeList.Contains(x.Key.ToString()) && x.Value == true).Count() > 1;
    var requestUrl = new Uri(Context.Request.GetDisplayUrl());
    var currentUrl = requestUrl.LocalPath.TrimEnd('/');
    var adminHomeUrl = Url.RouteUrl(new { controller = "Administration", action = "Administration" });
    var siteSettingsUrl = Url.Action("administration", "administration") == null ? string.Empty : Url.Action("administration", "administration") + "/site";
    var authenticationSettingsUrl = Url.Action("administration", "administration") + "/authentication-settings";
    var adSettingsUrl = Url.Action("administration", "administration") + "/user-directory-settings";
    var emailSettingsUrl = Url.Action("administration", "administration") == null ? string.Empty : Url.Action("administration", "administration") + "/e-mail-settings";
    var notificationSettingsUrl = Url.Action("NotificationSettings", "administration");
    var userSettingsUrl = Url.Action("administration", "administration") + "/user-settings";
    var manageLicenseUrl = Url.Action("LicenseSettings", "Administration") ?? string.Empty;
    var manageLicenseSettingsUrl = Url.Action("ManageLicenseSettings", "Administration");
    var embedSettingsUrl = Url.Action("EmbedSettings", "Administration");
    var reportSettingsUrl = Url.Action("ReportSettings", "Administration");
    var conciergeSupportUrl = Url.Action("ConciergeSupport", "Support");
    var dataConnectorUrl = Url.Action("DataConnector", "Administration");
    var corsSettingsUrl = Url.Action("CORSSettings", "Administration");
    var securitySettingsUrl = Url.Action("SecuritySettings", "Administration");
    var isValidLicense = false;
    if(ServerAppConfig.IsSelfHosted && !bool.TryParse(ViewBag.IsValidLicense, out isValidLicense))
    {
        var licenseMessage = GlobalAppSettings.ValidateAndGetLicenseMessage();
        isValidLicense = licenseMessage == null;
    }
}

@if (canShowAdminMenu)
{
<nav id="admin-nav">
    <ul>
        @if (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.SiteSettings])))
        {
            <li class="mobile-hidden">
                <a id="site-settings-link" class="admin-menu-item @((currentUrl.IndexOf(siteSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 || currentUrl.Equals(adminHomeUrl, StringComparison.CurrentCultureIgnoreCase)) ? "active" : string.Empty)" href="@siteSettingsUrl" role="tab">
                    <i class="su su-url"></i>
                    <span>[[[Site]]]</span>
                </a>
            </li>
        }
        @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.ReportSettings]))
        {
            <li>
                <a id="dashboard-settings-link" class="admin-menu-item @(currentUrl.IndexOf(reportSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@reportSettingsUrl" role="tab">
                    <i class="su su-nav-dashboard"></i>
                    <span>[[[Reports]]]</span>
                </a>
            </li>
        }
        @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.EmbedSettings]))
        {
            <li>
                <a id="embed-settings-link" class="admin-menu-item @(currentUrl.IndexOf(embedSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@embedSettingsUrl" role="tab">
                    <i class="su su-embed"></i>
                    <span>[[[Embed]]]</span>
                </a>
            </li>
        }
        @if (ServerAppConfig.IsSelfHosted)
        {
            @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.Email]))
            {
                <li>
                    <a id="email-settings-link" class="admin-menu-item @(currentUrl.IndexOf(emailSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@emailSettingsUrl" role="tab">
                        <i class="su su-e-mail"></i>
                        <span>[[[Email]]]</span>
                    </a>
                </li>
            }
            @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.Accounts]))
            {
                <li class="mobile-hidden">
                    <a id="user-settings-link" class="admin-menu-item @(currentUrl.IndexOf(userSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@userSettingsUrl" role="tab">
                        <i class="su su-user_settings_icon"></i>
                        <span>[[[Accounts]]]</span>
                    </a>
                </li>
            }
            @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.UserDirectorySettings]))
            {
                <li class="mobile-hidden">
                    <a id="active-directory-settings-link" class="admin-menu-item @(currentUrl.IndexOf(adSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@adSettingsUrl" role="tab">
                        <i class="su su-user-directory"></i>
                        <span>[[[User Directories]]]</span>
                    </a>
                </li>
            }
        }

        @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.Connectors]))
        {
            <li>
                <a id="datasource-settings-link" class="admin-menu-item @(currentUrl.IndexOf(dataConnectorUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@dataConnectorUrl" role="tab">
                    <i class="su su-connector"><i class="su-connector path1" style="padding-right:0px"></i></i>
                    <span>[[[Connectors]]]</span>
                </a>
            </li>
        }

        @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.AuthenticationSettings]))
        {
            <li class="mobile-hidden">
                <a id="authentication-settings-link" class="admin-menu-item @(currentUrl.IndexOf(authenticationSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 || (!ServerAppConfig.IsSelfHosted && currentUrl.IndexOf(adSettingsUrl,StringComparison.CurrentCultureIgnoreCase) > -1) ? "active" : string.Empty)" href="@(ServerAppConfig.IsSelfHosted ? authenticationSettingsUrl : adSettingsUrl)" role="tab">
                    <i class="su su-lock"></i>
                    <span>[[[Authentication]]]</span>
                </a>
            </li>
        }
        @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.NotificationSettings]))
        {
            <li class="mobile-hidden">
                <a id="notification-settings-link" class="admin-menu-item @(currentUrl.IndexOf(notificationSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@notificationSettingsUrl" role="tab">
                    <i class="su su-notification-settings"></i>
                    <span>[[[Notifications]]]</span>
                </a>
            </li>
        }

        @if (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.Security] || model[SettingsScopes.CORSPolicySettings])))
        {
            @if (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.CORSPolicySettings])))
            {
                <li class="mobile-hidden">
                    <a id="cors-settings-link" class="admin-menu-item @(currentUrl.IndexOf(corsSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@corsSettingsUrl">
                        <i class="su su-cors"></i>
                        <span>[[[CORS Policy]]]</span>
                    </a>
                </li>
            }

            @if (isAdmin || (model != null && (model[SettingsScopes.All] || model[SettingsScopes.Security])))
            {
                <li class="mobile-hidden">
                    <a id="cors-settings-link" class="admin-menu-item @(currentUrl.IndexOf(securitySettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@securitySettingsUrl">
                        <i class="su su-security"></i>
                        <span>[[[Security]]]</span>
                    </a>
                </li>
            }
        }

        @if (!ServerAppConfig.IsSelfHosted)
        {
            @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.SupportSettings]))
            {
                <li>
                    <a id="notification-settings-link" class="admin-menu-item @(currentUrl.IndexOf(conciergeSupportUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@conciergeSupportUrl" role="tab">
                        <i class="su su-concierge-support"></i>
                        <span>[[[Support Settings]]]</span>
                    </a>
                </li>
            }
        }
        else
        {
            @if (isAdmin || (model != null && model[SettingsScopes.All] || model[SettingsScopes.ManageLicense]))
            {
                <li class="mobile-hidden">
                    <a id="license-settings-link" class="admin-menu-item @(currentUrl.IndexOf(manageLicenseSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@manageLicenseSettingsUrl" role="tab">
                        <i class="su su-license-settings"></i>
                        <span>[[[Manage License]]]</span>
                        @if (!isValidLicense)
                        {
                            <span id="license-notification-indicator"></span>
                        }
                    </a>
                </li>
            }
        }
    </ul>
</nav>
}
