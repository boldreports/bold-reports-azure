@using Newtonsoft.Json;
@using Syncfusion.Server.Base.Item;
@using Syncfusion.Server.Base.Helpers
@inject IItemManagement _itemManagement
@inject ServerPrincipal identityResponse

@{
    var globalAppSettings = (GlobalAppSettings)ViewBag.GlobalAppSettings;

    var displayName = Context.Session.GetString("displayname") != null ? Context.Session.GetString("displayname").ToString() : string.Empty;

    var emailAddress = Context.Session.GetString("emailaddress") != null ? Context.Session.GetString("emailaddress").ToString() : string.Empty;

    var idpreferenceId = Context.Session.GetString("idpReferenceId") != null ? Context.Session.GetString("idpReferenceId").ToString() : string.Empty;

    var userName = Context.Session.GetString("username") != null ? Context.Session.GetString("username").ToString() : string.Empty;

    var requestUrl = new Uri(Context.Request.GetDisplayUrl());

    var currentUrlLocalPath = requestUrl.LocalPath.ToLower();

    var currentUrl = requestUrl.ToString().TrimEnd('/');

    var isImageRequest = currentUrl.IndexOf(".png", StringComparison.CurrentCultureIgnoreCase) > 0 ||
                 currentUrl.IndexOf(".jpg", StringComparison.CurrentCultureIgnoreCase) > 0 ||
                 currentUrl.IndexOf(".gif", StringComparison.CurrentCultureIgnoreCase) > 0 ||
                 currentUrl.IndexOf(".svg", StringComparison.CurrentCultureIgnoreCase) > 0;

    var idPUrl = _globalAppSettings.SystemSettings.IDPUrl;
    var isMobile = new DeviceDetection(Context).IsMobile;
    var defaultAppLogo = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/') + "/cdn/images/application/" + ServerAppConfig.AppSettings.AppBranding.Identifier + "/" + IconFileNames.MainLogo;
    var appLogo = (globalAppSettings.SystemSettings.MainScreenLogo.EndsWith(IconFileNames.MainLogo) || globalAppSettings.SystemSettings.MainScreenLogo.EndsWith("main_logo.png")) ? defaultAppLogo : globalAppSettings.SystemSettings.MainScreenLogo;
    var profilePictureUrl = idPUrl + Url.Content("/User/Avatar?id=" + idpreferenceId + "&ImageSize=64");
    var navigationUrl = Url.Action("Index", "Home");
    var widgetsPageUrl = Url.Action("Widgets", "Widgets");
    var profilePageUrl = Url.Action("Profilepage", "User");
    var itemPermissions = ViewBag.ItemPermission as Dictionary<ItemType, bool>;
    var isItemPageRequested = (requestUrl.AbsolutePath == "/" || requestUrl.AbsolutePath == Url.Content("~/") || requestUrl.ToString().IndexOf("/reports", StringComparison.CurrentCultureIgnoreCase) > 0 || requestUrl.ToString().IndexOf("/data-sources", StringComparison.CurrentCultureIgnoreCase) > 0 || requestUrl.ToString().IndexOf("/datasets", StringComparison.CurrentCultureIgnoreCase) > 0 || requestUrl.ToString().IndexOf("/schedules", StringComparison.CurrentCultureIgnoreCase) > 0) && !isMobile;
    var showImport = requestUrl.LocalPath.ToLower() == Url.Action("Reports", "Reports");
    var reportServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var manageSitesUrl = idPUrl + "/" + ServerAppConfig.TenantManagementHostName + "/sites";
    var isMasterTenant = Json.Serialize(globalAppSettings.SystemSettings.IsMaster);
    var userPermissionItem = ViewBag.ItemAddOptions;
    var hasOwnedReport = ViewBag.HasOwnedReport;
    var allItemsCount = ViewBag.ItemsCount as Dictionary<ItemType, int>;
    var etlEndpointPrefix = ServerAppConfig.IsSelfHosted ? ServerAppConfig.InternalAppIdpUrl : ServerAppConfig.AppSettings.EndPoints.ETLSiteURL;
    var navigateETLUrl = etlEndpointPrefix + (ServerAppConfig.IsSelfHosted ? $"/{ServerAppConfig.ETLHostName}/{globalAppSettings.SystemSettings.TenantId.ToString()}" : $"/{globalAppSettings.SystemSettings.TenantId.ToString()}");
    if (allItemsCount == null && ServerAppConfig.IsUserBasedMenu)
    {
        var itemtypeList = new List<ItemType>
{
            ItemType.Report,
            ItemType.Datasource,
            ItemType.Schedule,
            ItemType.Dataset
        };
        userPermissionItem = JsonConvert.SerializeObject(await _itemManagement.GetItemTypesWithCreateAccess(identityResponse.User.UserId));
        allItemsCount = await _itemManagement.GetAllItemsCountByItemTypeList(itemtypeList, identityResponse.User.UserId);
    }
}

<environment include="Development,CloudDevelopment">
    <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/custom-ui.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/custom-ui.js")" crossorigin="anonymous"></script>
</environment>
<environment exclude="Development,CloudDevelopment">
    <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/custom-ui.min.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/custom-ui.min.js")" crossorigin="anonymous"></script>
</environment>
<script nonce="@Context.Items["ScriptNonce"]">
    var isMasterTenant = @Json.Serialize(isMasterTenant);
</script>

<aside class="menu-bar" id="app-navigation" ng-controller="CustomMenuCtrl">

    <nav id="main-nav" class="sf-nav-group">
        <a id="mobile-profile-picture" href="@profilePageUrl" class="mobile-visible">
            <div class="mobile-display-name">@displayName</div>
            <div id="profilelogo" class="profile-pic-tag" data-id="@idpreferenceId" data-type="user" data-display-name="@displayName" data-image-size="110" data-toggle="tooltip" title="@displayName" data-placement="top"></div>

        </a>

        <ul id="items-menu" class="sf-main-nav">
            <li class="app-logo-block mobile-hidden">
                <a href="@navigationUrl" class="home-link" title="@globalAppSettings.SystemSettings.OrganizationName">
                    <div data-alt="[[[Application-Logo]]]" data-id="application-logo" data-src="@appLogo" data-default="@defaultAppLogo" class="lazyload img-loader app-logo"></div>
                </a>
            </li>
            <li class="sf-nav-separator logo-separator mobile-hidden">

            </li>
            @*
        <li class="hidden mobile-hidden @(currentUrlLocalPath == "/" || currentUrlLocalPath == "HttpRuntime.AppDomainAppVirtualPath/" ? "active" : string.Empty )">
        <a class="sf-nav-link" href="@Url.Action(" Index", "Home" )">
            <span class="menu-icon-container">
                <i class="su su-nav-datasource"></i>
            </span>
            <i class="su su-nav-home"></i>
            <span class="menu-label">[[[Home]]]</span>
        </a>
        </li>*@

            @if (!ServerAppConfig.IsSelfHosted || (ServerAppConfig.IsSelfHosted && isItemPageRequested && itemPermissions != null && ((itemPermissions.ContainsKey(ItemType.Report) && itemPermissions[ItemType.Report]) || (itemPermissions.ContainsKey(ItemType.Dataset) && itemPermissions[ItemType.Dataset]) || (itemPermissions.ContainsKey(ItemType.Datasource) && itemPermissions[ItemType.Datasource]) || (itemPermissions.ContainsKey(ItemType.Schedule) && itemPermissions[ItemType.Schedule])))) 
            {
                <li class="sf-nav-item mobile-hidden" id="create-item" data-action="create-items">
                    <a class="sf-nav-link prevent-default-action" href="#">
                        <span class="menu-icon-container create-menu-icon">
                            <i class="su su-add"></i>
                        </span>
                    </a>
                </li>
            }

            <li ng-repeat="items in menuList | orderBy:'Order' | filter:{ShowMenu:true} | filter: {Condition: true} as result" ng-init="count()" ng-if="items.Condition" id="{{items.Id}}">
                <ul class="default-lists" style="padding: 0; display:none">
                    <li class="mobile-hidden sf-nav-separator" ng-show="{{currentCount == '4' || currentCount == '7' && result.length < 7 }}"></li>
                    <li class="{{items.IsSelected}} {{items.MobileClassName}}" ng-class="$index > menuCount ? 'sf-nav-administration-item sf-nav-item' : 'sf-nav-item'" ng-show="{{displayAllMenuItems || $index < 5}}">
                        <a class="sf-nav-link" href="{{items.OpenLink}}" target="{{items.OpenBehavior}}" id="{{items.HrefId}}">
                            <span class="menu-icon-container" ng-class="items.Id == 'bold-etl' ? 'etl-icon-custom-style' : ''">
                                <i class="{{items.ImageLink}} {{items.ImageClassName}}" ng-style="{'background-image': items.ImageClassName == 'custom-menu' ? 'url(' + items.ImageLink +')' : ''}"></i>
                            </span>
                            <span class="menu-label">{{items.Display}}</span>
                        </a>
                    </li>
                    <li class="sf-nav-administration-collapse-item dropup" ng-class="result.length < 9 ? 'menu-toggle' : ''" ng-if="!displayAllMenuItems && $index >= 5">
                        <a class="dropdown-toggle mobile-hidden" data-toggle="dropdown" ng-show="{{$index == 5 && items.Condition}}">
                            <span class="menu-icon-container">
                                <i class="su su-dots-menu"></i>
                            </span>
                        </a>
                        <ul class="dropdown-menu sub-menu" role="menu">
                            <li ng-repeat="items in menuList | orderBy:'Order' | filter:{ShowMenu:true} | filter: {Condition: true}" class="sf-nav-item {{items.IsSelected}} {{items.MobileClassName}} remove-margin" ng-if="$index >= 5 && items.Condition">
                                <a class="sf-nav-link" href="{{items.OpenLink}}" target="{{items.OpenBehavior}}">
                                    <span class="menu-icon-container">
                                        <i class="{{items.ImageLink}} {{items.ImageClassName}}" ng-style="{'background-image': items.ImageClassName == 'custom-menu' ? 'url(' + items.ImageLink +')' : ''}"></i>
                                    </span>
                                    <span class="menu-label">{{items.Display}}</span>
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>

            @*if (GlobalAppSettings.Branding == AppBranding.Syncfusion.Identifier)
        {
        <li class="mobile-hidden sf-nav-item @(currentUrlLocalPath.IndexOf(homepagePageUrl, StringComparison.OrdinalIgnoreCase) > -1 ? " active" : string.Empty )">
            <a class="sf-nav-link" href="@homepagePageUrl">
                <span class="menu-icon-container">
                    <i class="su su-pin"></i>
                </span>
                <span class="menu-label">[[[Pinboards]]]</span>
            </a>
        </li>
        }
        <li class="mobile-hidden sf-nav-item @(currentUrlLocalPath.IndexOf(slideshowPageUrl, StringComparison.OrdinalIgnoreCase) > -1 ? " active" : string.Empty )">
            <a class="sf-nav-link" href="@slideshowPageUrl">
                <span class="menu-icon-container">
                    <i class="su su-tv"></i>
                </span>
                <span class="menu-label">[[[Slideshows]]]</span>
            </a>
        </li>*@



            @*@if (!ServerAppConfig.IsSelfHosted)
        {
            <li class="mobile-visible sf-nav-separator">

            </li>
            <li class="mobile-visible sf-nav-item request-concierge-support">
                <span class="sf-nav-link sf-menu-option-link">
                    <span class="menu-icon-container">
                        <i class="su su-concierge-support"></i>
                    </span>
                    <span class="menu-label">[[[Support]]]</span>
                </span>
            </li>
        }*@

            <li class="li-logout mobile-visible">
                <img data-src="@(Model +"/images/divider_dark.png")" class="upper-divider" />
                <a class="" href="@Url.Action("logout", "accounts" )">
                    <span class="menu-icon-container">
                        <i class="su su-logout"></i>
                    </span>
                    <span class="menu-label">[[[Sign out]]]</span>
                </a>
            </li>
        </ul>
    </nav>
    @if (!isMobile)
    {
        <nav id="sub-nav" class="sf-nav-group mobile-hidden">
            <ul>
                <li class="sub-menu-action">
                    <span id="user-system-notification" class="menu-icon-container">
                        <i class="su su-notification-alert"></i>
                    </span>
                </li>
                   <li class="sub-menu-action dropup">
                        <a class="dropdown-toggle" data-toggle="dropdown">
                            <span class="menu-icon-container">
                                <i class="su su-help"></i>
                            </span>
                        </a>
                        <ul class="dropdown-menu sub-menu" role="menu">
                            @if (!ServerAppConfig.IsSelfHosted)
                            {
                                if (isItemPageRequested && itemPermissions != null && itemPermissions.ContainsKey(ItemType.Report) && itemPermissions[ItemType.Report] && showImport)
                                {
                                    <li class="sub-menu-item-title">
                                        <div>[[[Explore]]]</div>
                                    </li>
                                    <li class="sub-menu-item">
                                    <a class="add-sample-button prevent-default-action" href="#">
                                            [[[Sample Reports]]]
                                        </a>
                                    </li>
                                    <li class="sf-sub-menu-separator"></li>
                                }
                            }

                            @if (!ServerAppConfig.IsHideHelpLink)
                            {
                                <li class="sub-menu-item-title">
                                    <div>[[[Help]]]</div>
                                </li>
                                <li class="sub-menu-item">
                                    <a class="online-help-link" href="@(ViewBag.helpSiteBaseUrl + ViewBag.helpSiteUrl)" target="_blank">
                                        [[[Online Help]]]
                                    </a>
                                </li>
                            }
                            @if (!ServerAppConfig.IsSelfHosted)
                            {
                                <li class="sub-menu-item">
                                    <a href="https://www.@(GlobalAppSettings.BrandingDomain)/contact" target="_blank">
                                        [[[Contact Us]]]
                                    </a>
                                </li>
                                <li class="sf-sub-menu-separator"></li>
                                <li class="sub-menu-item-title">
                                    <div>[[[Legal]]]</div>
                                </li>
                                <li class="sub-menu-item">
                                    <a href="https://www.@(GlobalAppSettings.BrandingDomain)/privacy" target="_blank">
                                        [[[Privacy Policy]]]
                                    </a>
                                </li>
                                <li class="sub-menu-item">
                                    <a href="https://www.@(GlobalAppSettings.BrandingDomain)/terms-of-use" target="_blank">
                                        [[[Terms of Use]]]
                                    </a>
                                </li>
                            }
                            else
                            {
                                @if (!ServerAppConfig.IsHideHelpLink)
                                {
                                    <li class="sf-sub-menu-separator"></li>
                                }
                                <li class="sub-menu-item-title">
                                    <div>[[[Version]]]</div>
                                </li>
                                <li class="sub-menu-item">
                                    <span style="background: none;cursor: default;font-size: 12px;">[[[@globalAppSettings.SystemSettings.ProductVersion]]]</span>
                                </li>
                            }
                        </ul>
                    </li>
                
                <li class="profile-section dropup" id="dropdown-profile">
                    <a class="dropdown-toggle" data-toggle="dropdown">
                        <span class="profile-container">
                            <div class="profile-pic-tag" data-id="@idpreferenceId" data-type="user" data-display-name="@displayName" data-image-size="40" data-toggle="tooltip" title="@displayName" data-placement="top"></div>
                        </span>
                    </a>
                    <ul class="dropdown-menu sub-menu" role="menu">
                        @if (ServerAppConfig.IsSelfHosted)
                        {
                            <li class="sub-menu-item sub-menu-profile" id="user-sites">
                                <div class="sub-menu-profile-text-padding">[[[Your Sites]]]</div>
                                <img class='loader-sites-gif' src="@dashboardServerResourceUrl/images/waitingpopup.gif" style="display:block; margin: auto; height:30px; width:30px;" />
                            </li>
                            <li id="more-sites-id">
                            </li>
                            <li class="sf-sub-menu-separator admin-privilege" style="display: none;"></li>
                            <li class="sub-menu-item sub-menu-profile admin-privilege" style="display: none;">
                                <a href="@manageSitesUrl" target="_blank">
                                    <div class="manage-site">[[[Manage sites (Admin access)]]]</div>
                                </a>
                            </li>
                            <li class="sf-sub-menu-separator"></li>
                        }
                        <li class="sub-menu-item sub-menu-profile">
                            <div class="sub-menu-profile-text-padding">[[[Profile]]]</div>
                            <a href="@Url.Action("ProfilePage", "User" )">
                                <div class="sub-menu-profile-hover">
                                    <div class="sub-menu-user-name"><div class="sub-menu-user-name-style">@displayName</div><div class="sub-menu-user-email-style">@(ServerAppConfig.IsAutoGeneratedMail(emailAddress) ? userName : emailAddress)</div></div>
                                    <div class="profile-pic-tag" data-id="@idpreferenceId" data-type="user" data-display-name="@displayName" data-image-size="40" data-toggle="tooltip" title="@displayName" data-placement="top"></div>
                                </div>
                            </a>
                        </li>
                        @if (!ServerAppConfig.IsSelfHosted)
                        {
                            <li class="sf-sub-menu-separator"></li>
                            <li class="sub-menu-item">
                                <a class="request-concierge-support" href="@ServerAppConfig.AppSettings.Syncfusion.Support.CreateTicket" target="_blank">
                                    [[[Create Ticket]]]
                                </a>
                            </li>
                            <li class="sub-menu-item">
                                <a href="@ServerAppConfig.AppSettings.Syncfusion.Support.ListTicket" target="_blank">
                                    [[[My Tickets]]]
                                </a>
                            </li>
                            if (Convert.ToBoolean(Context.Session.GetString("IsAdmin")))
                            {
                                <li class="sf-sub-menu-separator"></li>
                                <li class="sub-menu-item">
                                    <a href="@(ServerAppConfig.AppSettings.EndPoints.TenantAppUrl.TrimEnd('/') + "/sites/" + globalAppSettings.SystemSettings.TenantId + "/subscription")" target="_blank">
                                        [[[Subscription and Billing]]]
                                    </a>
                                </li>
                            }
                        }
                        <li class="sf-sub-menu-separator"></li>
                        <li class="sub-menu-item">
                            <a href="@Url.Action("logout", "accounts" )">
                                [[[Sign out]]]
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </nav>
    }

</aside>
<script nonce="@Context.Items["ScriptNonce"]">
        var userTenantsUrl = "@Url.Action("GetUserTenants", "User")";
        var tenantIdentifierPrefix = "@ServerAppConfig.TenantIdentifierPrefix";
        var idpUrl = "@idPUrl";
        var dashboardPageUrl = "@Url.Action("Reports", "Reports")";
        var dataSourcesPageUrl = "@Url.Action("DataSources", "DataSources")";
        var datasetPageUrl = "@Url.Action("Datasets", "Datasets")";
        var schedulePageUrl = "@Url.Action("Schedules", "Scheduler")";
        var PublishPageUrl = "@Url.Action("GetPublishedItems", "Publish")";
        var profilePageUrl = "@Url.Action("Profilepage", "User")";
        var homepagePageUrl = "@System.Net.WebUtility.UrlDecode(Url.Action("Homepages", "Boards"))";
        var slideshowPageUrl = "@Url.Action("Slideshows", "Slideshow")";
        var adminPageUrl = "@Url.Action("Administration", "Administration")";
        var userPageurl = "@Url.Action("Index", "UserManagement")";
        var groupPageurl = "@Url.Action("Group", "Group")";
        var groupPermissionUrl = "@Url.Action("grouppermission", "permission")";
        var userPermissionUrl = "@Url.Action("userpermission", "permission")";
        var currentUrlLocalPath = "@requestUrl.LocalPath.ToLower()";
        var boldETLUrl = @Json.Serialize(navigateETLUrl);
        var isAzureApplication = @Json.Serialize(ServerAppConfig.IsAzureApplication);
        var isMobile = @Json.Serialize(isMobile);
        var isImageRequest = @Json.Serialize(isImageRequest);
        var isAdmin = @Json.Serialize(Convert.ToBoolean(Context.Session.GetString("IsAdmin")));
        var isMasterTenant = @Json.Serialize(globalAppSettings.SystemSettings.IsMaster);
        var userPermissionItem = @Json.Serialize(userPermissionItem);
        var isUserBasedMenu = @Json.Serialize(ServerAppConfig.IsUserBasedMenu);
        var isSelfHosted = @Json.Serialize(ServerAppConfig.IsSelfHosted);
        var allItemsCount = @Json.Serialize(allItemsCount);
        var hasOwnedReport = @Json.Serialize(hasOwnedReport);
        var isHideETLOption = @Json.Serialize(ServerAppConfig.IsHideETLOption);
</script>
