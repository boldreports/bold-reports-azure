@{
    var requestUrl = new Uri(Context.Request.GetDisplayUrl());
    var currentUrl = requestUrl.LocalPath.TrimEnd('/');
    var adminHomeUrl = Url.Action("administration", "administration");
    var siteSettingsUrl = Url.Action("administration", "administration") == null ? string.Empty : Url.Action("administration", "administration") + "/site";
    var adSettingsUrl = Url.Action("user-directory-settings", "administration");
    var emailSettingsUrl = Url.Action("administration", "administration") == null ? string.Empty : Url.Action("administration", "administration") + "/e-mail-settings";
    var manageLicenseUrl = Url.Action("LicenseSettings", "Administration");
    var userSettingsUrl = Url.Action("UserSettings", "administration");
    var ssoSettingsUrl = Url.Action("SAMLSettings", "Administration");
    var authSettingsUrl = Url.Action("AuthenticationSettings", "Administration");
    var isSelfHosted = CloudAppConfig.IsSelfHosted;
    var isBoldBIOnPremise = new GlobalAppSettings().GetLicenseSettings(_clientDateTimeInfo).Products.Any(x => x.TenantType == TenantType.BoldBIOnPremise);
    var embedSettingsUrl = Url.Action("EmbedSettings", "Administration");
    var apiKeysUrl = Url.Action("ApiKeys", "Administration");
    var lookandfeelUrl = Url.Action("LookandFeel", "Administration");
}

<nav id="admin-nav">
    <ul>
        <li>
            <a id="site-settings-link" class="admin-menu-item @(currentUrl.IndexOf(siteSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 || currentUrl.Equals(adminHomeUrl, StringComparison.CurrentCultureIgnoreCase) ? "active" : string.Empty)" href="@siteSettingsUrl" role="tab">
                <i class="su su-url"></i>
                <span>[[[Site]]]</span>
            </a>
        </li>
        <li class="hidden">
            <a id="site-settings-link" class="admin-menu-item @(currentUrl.IndexOf(lookandfeelUrl, StringComparison.CurrentCultureIgnoreCase) > -1  ? "active" : string.Empty)" href="@lookandfeelUrl" role="tab">
                <i class="su su-look-and-feel"></i>
                <span>[[[Look and Feel]]]</span>
            </a>
        </li>
        @if (isBoldBIOnPremise)
        {
            <li>
                <a id="embed-settings-link" class="admin-menu-item @(currentUrl.IndexOf(embedSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@embedSettingsUrl" role="tab">
                    <i class="su su-embed"></i>
                    <span>[[[Embed]]]</span>
                </a>
            </li>
        }
        <li>
            <a id="email-settings-link" class="admin-menu-item @(currentUrl.IndexOf(emailSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@emailSettingsUrl" role="tab">
                <i class="su su-e-mail"></i>
                <span>[[[Email]]]</span>
            </a>
        </li>
        <li>
            <a id="user-settings-link" class="admin-menu-item @(currentUrl.IndexOf(userSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@userSettingsUrl" role="tab">
                <i class="su su-user_settings_icon"></i>
                <span>[[[Accounts]]]</span>
            </a>
        </li>
        @*@if (isSelfHosted)
        {
            <li>
                <a id="sso-settings-link" class="admin-menu-item @(currentUrl.IndexOf(ssoSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@ssoSettingsUrl" role="tab">
                    <i class="su su-single-sign-on"></i>
                    <span>SSO</span>
                </a>
            </li>
        }*@
        <li>
            <a id="oauth-settings-link" class="admin-menu-item @(currentUrl.IndexOf(authSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@authSettingsUrl" role="tab">
                <i class="su su-lock"></i>
                <span>[[[Authentication]]]</span>
            </a>
        </li>
        <li>
            <a id="api-keys-link" class="admin-menu-item @(currentUrl.IndexOf(apiKeysUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@apiKeysUrl" role="tab">
                <i class="su su-single-sign-on"></i>
                <span>[[[API Keys]]]</span>
            </a>
        </li>
        <li>
            <a id="license-settings-link" class="admin-menu-item @(currentUrl.IndexOf(manageLicenseUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@manageLicenseUrl" role="tab">
                <i class="su su-license-settings"></i>
                <span>[[[Manage License]]]</span>
            </a>
        </li>
        @*<li>
            <a id="active-directory-settings-link" class="admin-menu-item @(currentUrl.IndexOf(adSettingsUrl, StringComparison.CurrentCultureIgnoreCase) > -1 ? "active" : string.Empty)" href="@adSettingsUrl" role="tab">
                <i class="su su-active-directory"></i>
                <span>Active Directory</span>
            </a>
        </li>*@
    </ul>
</nav>
