@using System.Configuration
@using System.Web
@{
    var idPUrl = GlobalAppSettings.SystemSettings.BaseUrl.TrimEnd('/');
    ViewBag.Title = "[[[Users]]] - " + GlobalAppSettings.SystemSettings.OrganizationName;
}

@section styles{
    <link rel="stylesheet" href="~/bundles/css/user-management-module.css" asp-append-version="true" />
}

@section scripts{
    <script src="~/bundles/js/user-management.js" asp-append-version="true"></script>
    <script src="~/bundles/js/ej2.js" asp-append-version="true"></script>
    <script>
        $.extend(ej, Syncfusion);
    </script>
    <script>
        var checkMailSettingUrl = "@Url.Action("checkmailsettingsexist", "Administration")";
        var postactionUrl = "@Url.Action("postaction", "UserManagement")";
        var isPresentUserNameAndEmailId = "@Url.Action("isPresentUserNameAndEmailId", "UserManagement")";
        var isPresentusernameUrl = "@Url.Action("IsPresentusername", "UserManagement")";
        var updateUserIntoGroupUrl = "@Url.Action("UpdateUserIntoGroup", "UserManagement")";
        var checkGroupnameUrl = "@Url.Action("CheckGroupname", "Group")";
        var getAddUserInGroupDialogUrl = "@Url.Action("GetAddUserInGroupDialog", "UserManagement")";
        var saveUserIntoGroupUrl = "@Url.Action("SaveUserIntoGroup", "UserManagement")";
        var avatarUrl = "@(idPUrl + Url.Action("Avatar", "User"))";
        var getAllActiveGroupListUrl = "@Url.Action("GetAllActiveGroupList", "UserManagement")";
        var deleteFromUserListUrl = "@Url.Action("DeleteFromUserList", "UserManagement")";
        var userPageUrl = "@Url.Action("Index", "UserManagement")";
        var deleteSingleFromUserListUrl = "@Url.Action("DeleteSingleFromUserList", "UserManagement")";
        var getItemsUrl = "@Url.Action("GetItems", "TenantsManagement")";
        var grantAccessUrl = "@Url.Action("GrantUserAccessForTenants", "UserManagement")";
        var isEmailRequired = @Json.Serialize((GlobalAppSettings.SystemSettings.ActivationType == ActivationType.EmailActivation) || (GlobalAppSettings.SystemSettings.ActivationType == ActivationType.AutomaticActivation && GlobalAppSettings.SystemSettings.EmailRequired == EmailRequired.Required));
        var makeAdminUrl = "@Url.Action("AssignRole", "UserManagement")";
        var removeAdminUrl = "@Url.Action("RemoveRole", "UserManagement")";
        var getUserSUrl = "@Url.Action("GetAllUserList", "TenantsManagement")";

    </script>
    <script>
        window.data = JSON.parse(@Html.Raw(Json.Serialize(ViewBag.users)));
                var baseRootUrl = "@Url.Content("~/")";

    </script>
    <script type="text/javascript">
        function selectItems(e) {
            var parentRow = $(e.event.currentTarget.parentNode).parents(".user-row-details");
            $(parentRow).hasClass('user-table-row-selected')
                ? $(parentRow).removeClass('user-table-row-selected')
                : $(parentRow).addClass("user-table-row-selected");
            ($(".grid-view-table").find(".user-table-row-selected").length > 0)
                ? $("#add-user-in-group").fadeIn("slow")
                : $("#add-user-in-group").fadeOut("slow");
        }

    </script>

    <script type="text/x-jsrender" id="user-profile-template">
        {{if Email.indexOf("@CloudAppConfig.AutoGeneratedEmailDomain") == -1}}
        <a class="item-name grid-content" title="{{:DisplayName}}" data-toggle="tooltip" href="@Url.Action("ViewProfile", "UserManagement")?userid={{:UserId}}&email={{:Email}}">{{:DisplayName}}</a>
        {{else}}
        <a class="item-name grid-content" title="{{:DisplayName}}" data-toggle="tooltip" href="@Url.Action("ViewProfile", "UserManagement")?userid={{:UserId}}">{{:DisplayName}}</a>
        {{/if}}
        {{if DirectoryType.Id == @((int)DirectoryType.AzureAD)}}
        <span class="su su-azure-ad grid-directory-icon"> </span>
        {{else DirectoryType.Id == @((int)DirectoryType.ExternalDatabase)}}
        <span class="su su-datasource grid-directory-icon"> </span>
        {{else DirectoryType.Id == @((int)DirectoryType.WindowsAD)}}
        <span class="su su-windows-ad grid-directory-icon"> </span>
        {{else DirectoryType.Id == @((int)DirectoryType.OAuth2)}}
        <span class="su su-oauth grid-directory-icon"><span class="su su-oauth path1"></span><span class="su su-oauth path2"></span><span class="su su-oauth path3"></span></span>
        {{else DirectoryType.Id == @((int)DirectoryType.OpenIDConnect)}}
        <span class="su su-openid grid-directory-icon"> </span>
        {{else DirectoryType.Id == @((int)DirectoryType.JWTSSO)}}
        <span class="su su-single-sign-on grid-directory-icon"> </span>
        {{/if}}
    </script>
    <script type="text/x-jsrender" id="user-username-template">
        <span class="grid-content" title="{{:Username}}" data-toggle="tooltip">{{:Username}}</span>
    </script>
    <script type="text/x-jsrender" id="user-email-template">
        {{if Email.indexOf("@CloudAppConfig.AutoGeneratedEmailDomain") == -1}}
        <span class="grid-content" title="{{:Email}}" data-toggle="tooltip">{{:Email}}</span>
        {{else}}
        <span class="grid-content" title="{{:Email}}" data-toggle="tooltip">@string.Empty</span>
        {{/if}}
    </script>
    <script type="text/x-jsrender" id="email-verification-template">
        {{if EmailVerified}}
        Completed
        {{else}}
        Pending
        {{/if}}
    </script>
    <script type="text/x-jsrender" id="status-description-template">
        {{:UserStatus}}
    </script>
    <script type="text/x-jsrender" id="filter-template">
        <span>
            <a class="e-filtericon e-icon e-filterset" href="">
            </a>
        </span>
    </script>
    <script type="text/x-jsrender" id="role-template">
        {{:Role}}
    </script>
    <script type="text/x-jsrender" id="itemname-header">
        <div class="item-name">[[[Name]]]</div>
    </script>
    <script type="text/x-jsrender" id="username-header">
        <div class="item-header">[[[Username]]]</div>
    </script>
    <script type="text/x-jsrender" id="email-header">
        <div class="item-header">[[[Email Address]]]</div>
    </script>
    <script type="text/x-jsrender" id="status-header">
        <div class="item-header">[[[Status]]]</div>
    </script>
    <script type="text/x-jsrender" id="email-verification-header">
        <div class="item-header">[[[Email Verification]]]</div>
    </script>
    <script type="text/x-jsrender" id="role-header">
        <div class="item-header">[[[Role]]]</div>
    </script>

    <script type="text/x-jsrender" id="options">
        <div class="dropdown">
            <span class="dropdown-toggle option-icon" data-toggle="dropdown" data-content="{{:UserName}}">
                <span class="su su-options"> </span>
            </span>
            <ul class="dropdown-menu" role="menu">
                <li>
                    {{if Email.indexOf("@CloudAppConfig.AutoGeneratedEmailDomain") == -1}}
                    <a href="@Url.Action("ViewProfile", "UserManagement")?userid={{:UserId}}&email={{:Email}}" title="">
                        <i class="su su-eye"></i>
                        <span>[[[View]]]</span>
                    </a>
                    {{else}}
                    <a href="@Url.Action("ViewProfile", "UserManagement")?userid={{:UserId}}" title="">
                        <i class="su su-eye"></i>
                        <span>[[[View]]]</span>
                    </a>
                    {{/if}}
                </li>
                {{if Email != "@ViewBag.LoggedUser"}}
                {{if Role == ""}}
                <li class="assign-role" data-content="{{:UserId}}">
                    <a class="make-admin-class">
                        <i class="su su-user-settings"></i>
                        <span>[[[Make Admin]]]</span>
                    </a>
                </li>
                {{/if}}
                {{if Role == "@Role.Admin"}}
                <li class="assign-role" data-content="{{:UserId}}">
                    <a class="remove-admin-class" title="">
                        <i class="su su-user-settings"></i>
                        <span>[[[Remove Admin]]]</span>
                    </a>
                </li>
                {{/if}}
                <li class="delete-user" data-content="{{:UserId}}">
                    <a class="delete-class" title="">
                        <i class="su su-delete"></i>
                        <span>[[[Delete]]]</span>
                    </a>
                </li>
                {{/if}}
            </ul>
        </div>
    </script>

    <script type="text/javascript">
        $(function() {
            $("#search-users").val("");
            var data = ej.DataManager({
                url: "@Url.Action("GetAllUserList", "TenantsManagement")?includeInactiveUsers=true",
                adaptor: new ej.UrlAdaptor()
            });

            $("#user_grid").ejGrid({
                dataSource: data,
                gridLines: ej.Grid.GridLines.None,
                allowPaging: true,
                allowSorting: true,
                allowSearching: true,
                allowSelection: true,
                allowFiltering: false,
                pageSettings: { pageSize: 20 },
                filterSettings: { filterType: "menu" },
                selectionType: ej.Grid.SelectionType.Multiple,
                selectionSettings: { selectionMode: ["row"] },
                enableRowHover: true,
                enableAltRow: false,
                rowDataBound: function() {
                    var height = $(".e-gridcontent").height();
                    if (height != null) {
                        rowBound();
                    }
                },
                dataBound: function(args) {
                    $('[data-toggle="tooltip"]').tooltip();
                },
                rowSelecting: function(e) {
                    this.multiSelectCtrlRequest = true;
                },
                rowSelected: "fnOnUserRowSelected",
                recordClick: "fnUserRecordClick",
                load: "fnOnUserGridLoad",
                actionBegin: "fnOnUserGridActionBegin",
                actionComplete: "fnOnUserGridActionComplete",
                columns: [
                    {
                        template: true,
                        allowFiltering: false,
                        allowSorting: true,
                        templateID: "#user-profile-template",
                        headerText: "[[[Name]]]",
                        width: 115,
                        headerTemplateID: "#itemname-header",
                        field: "DisplayName",
                        type: "string"
                    },
                    {
                        template: true,
                        allowFiltering: false,
                        allowSorting: true,
                        field: "Username",
                        templateID: "#user-username-template",
                        headerText: "[[[Username]]]",
                        headerTemplateID: "#username-header",
                        type: "string",
                        width: 155
                    },
                    {
                        field: "Email",
                        allowFiltering: false,
                        templateID: "#user-email-template",
                        headerText: "[[[Email Address]]]",
                        headerTemplateID: "#email-header",
                        type: "string",
                        width: 155
                    },
                    {
                        field: "Role",
                        headerText: "[[[Role]]]",
                        headerTemplateID: "#role-header",
                        templateID: "#role-template",
                        width: 80,
                        allowFiltering: false,
                    },
                    {
                        field: "StatusDescription",
                        headerText: "[[[Status]]]",
                        headerTemplateID: "#status-header",
                        templateID: "#status-description-template",
                        width: 80,
                        allowFiltering: false
                    },
                    {
                        field: "IsActivated",
                        headerText: "[[[Email Verification]]]",
                        headerTemplateID: "#email-verification-header",
                        templateID: "#email-verification-template",
                        width: 90,
                        allowFiltering: false
                    },
                    {
                        template: true,
                        allowSorting: false,
                        templateID: "#options",
                        width: 75,
                        allowFiltering: false
                    },

                ]

            });
        });

        $(document).ready(function() {
            $("#new-user-dropdown").tooltip();
            $("#synchronize-dropdown").tooltip();
        });
    </script>
}

@section MainSection{
    <div id="base-container" class="admin-page-content-container full-page-container">
        <div class="admin-page-content col-md-12 no-padding">
            <div class="col-xs-12 admin-page-header">
                <div class="admin-page-header-description col-xs-6 no-padding" id="application-title">
                    <h1 class="h2 page-title">
                        <input type="hidden" id="user-count-text" value="@ViewBag.UserCount">
                        [[[USERS]]] (<span id="user-count" value="@ViewBag.UserCount">@ViewBag.UserCount</span>)
                    </h1>

                </div>
                <div class="col-xs-6 no-padding admin-header-btn">
                    @if (DeviceDetection.IsMobile)
                    {
                        <button class="primary-button pull-right" id="new-user-dropdown" title="[[[Add new user]]]" data-toggle="tooltip" onclick="onUserAddDialogOpen()">
                            [[[New User]]]
                        </button>
                    }
                    else
                    {
                        <button class="dropdown-toggle primary-button pull-right" data-toggle="dropdown" data-placement="left" id="new-user-dropdown" title="[[[Add new user]]]">
                            <span>[[[New User]]] </span>
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu add-user-dropdown multi-level pull-right" role="menu" id="dropdown-options">
                            <li id="create-user" title="[[[Add new user]]]" onclick="onUserAddDialogOpen()">
                                <a href="javascript:void(0)" title="[[[Add user]]]" data-toggle="tooltip" data-placement="top">
                                    <i class="su su-user-add"> </i>
                                    <span>[[[Add User]]]</span>
                                </a>
                            </li>
                            <li>
                                <a href="@Url.Action("UploadFileFormAction", "UserManagement")" title="[[[Import users from CSV]]]" data-toggle="tooltip" data-placement="bottom">
                                    <i class="su su-download"> </i>
                                    <span>[[[Import from CSV]]]</span>
                                </a>
                            </li>
                        </ul>
                    }
                    <button class="primary-button pull-right" id="assign-user-role-button" onclick="onMakeMultipleAdminDialogOpen()" disabled>
                        [[[Make Admin]]]
                    </button>
                    <button class="secondary-button pull-right" id="grant-user-button" onclick="onAddTenantsDialogOpen()" disabled>
                        [[[Grant Site Access]]]
                    </button>

                </div>
            </div>

            <div id="user-list-container" class="list col-xs-12 admin-page-body">
                <div id="search-area" class="pull-right">
                    <input type="text" class="pull-left" id="search-users" placeholder="[[[Search users]]]" />
                    <span class="su su-inner-close close-icon pull-left" id="clear-search" title="[[[Clear search]]]"></span>
                    <span class="su su-search search-user pull-left" title="[[[Search]]]"></span>
                </div>
                <div class="col-xs-12 no-padding ">
                    <div id="user_grid">
                    </div>
                </div>


                @if (ViewBag.AzureADUserCount > 0)
                {
                    <div id="azure-ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-azure-ad"> </span> - [[[Azure AD User]]]</div>
                }
                @if (ViewBag.DatabaseUserCount > 0)
                {
                    <div id="database-indication" class="ad-azure-indication col-lg-12"><span class="su su-datasource"> </span> - [[[Database User]]]</div>
                }
                @if (ViewBag.AdUserCount > 0)
                {
                    <div id="ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-windows-ad"> </span> - [[[Windows AD User]]]</div>
                }
                @if (ViewBag.OAuthUserCount > 0)
                {
                    <div id="ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-oauth"><span class="su su-oauth path1"></span><span class="su su-oauth path2"></span><span class="su su-oauth path3"></span></span> - [[[OAuth User]]]</div>
                }
                @if (ViewBag.OpenIdUserCount > 0)
                {
                    <div id="ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-openid"> </span> - [[[OpenID Connect User]]]</div>
                }
                @if (ViewBag.JwtSsoUserCount > 0)
                {
                    <div id="ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-single-sign-on"> </span> - [[[JWT SSO User]]]</div>
                }
            </div>
        </div>
        @await Html.PartialAsync("../Shared/_FooterOnPremise")
    </div>
    <div id="grant-access-dialog"></div>
    <div id="add-tenants-report-dialog"></div>
    @await Html.PartialAsync("../UserManagement/_GrantAccessDialog")
    @await Html.PartialAsync("../UserManagement/_GrantAccessReport")
    @await Html.PartialAsync("../UserManagement/_UserAddDialog")
    @await Html.PartialAsync("../UserManagement/_MultipleUserDeleteDialog")
    @await Html.PartialAsync("../UserManagement/_SingleUserDeleteDialog")
    @await Html.PartialAsync("../UserManagement/_MakeSingleAdminDialog")
    @await Html.PartialAsync("../UserManagement/_RemoveAdminDialog")
    @await Html.PartialAsync("../UserManagement/_MakeMultipleAdminDialog")
}
