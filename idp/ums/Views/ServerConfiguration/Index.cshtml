@{
    Layout = null;
    var displayName = GlobalAppSettings.BrandingDisplayName;
    var connectionType = GlobalAppSettings.Configuration["IdP:AzureBlobConnectionType"];
    var storageAccountName = GlobalAppSettings.Configuration["IdP:AzureBlobStorageAccountName"];
    var accessKey = GlobalAppSettings.Configuration["IdP:AzureBlobStorageAccessKey"];
    var blobServiceEndpoint = GlobalAppSettings.Configuration["IdP:AzureBlobServiceEndpoint"];
    var containerName = GlobalAppSettings.Configuration["IdP:AzureBlobContainerName"];
    var hasDRMConfiguration = ViewBag.HasDRMConfiguration ? "true" : "false";
    var hasDbConfiguration = ViewBag.HasDbConfiguration ? "true" : "false";
    var productName = ViewBag.TenantType == TenantType.BoldBIOnPremise ? "Embedded" : "On-Premise";
    var helpLinkData = ViewBag.TenantType == TenantType.BoldBIOnPremise ? "Embedded BI" : "Enterprise Reporting";
    var pathbase = Context.Request.PathBase;
    var serverUserHelp = $"[[[Please refer to <a href='{HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.ServerDataStoreConfiguration)}'>this</a> documentation to know about what are the permissions need to be assigned to allow {helpLinkData} to connect and use the database.]]]";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0">
    <meta name="has-drm-configuration" content="@hasDRMConfiguration">
    <meta name="has-db-configuration" content="@hasDbConfiguration">
    <meta name="IdStorageConfiguration" content="@HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.IdStorageConfiguration)" />
    <meta name="AdminCreation" content="@HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.AdminCreation)" />
    <meta name="ServerStorageConfiguration" content="@HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.ServerStorageConfiguration)" />
    <meta name="ServerDataStoreConfiguration" content="@HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.ServerDataStoreConfiguration)" />

    <title>[[[Welcome to ]]]@displayName</title>
    @if (CloudAppConfig.IsSelfHosted)
    {
        <link rel="icon" href="@Url.Content("~/images/" + GlobalAppSettings.Branding + "/application/favicon.ico")" />
    }
    else
    {
        <link rel="icon" href="@GlobalAppSettings.SystemSettings.FavIcon" onerror="this.onerror=null;this.src='@GlobalAppSettings.CdnDomain/@GlobalAppSettings.Branding/application/@IconFileNames.Favicon';" />
    }

    @await Html.PartialAsync("../Shared/_FontReference")
    <link rel="stylesheet" href="~/bundles/css/system-configuration.css" asp-append-version="true" />

    <script src="~/js/onpremiselocalizationcontent.js" asp-append-version="true"></script>
    <script src="~/bundles/js/system-configuration.js" asp-append-version="true"></script>


    <script>
        var idStorageConfiguration = $('meta[name="IdStorageConfiguration"]').attr("content");
        var adminCreation = $('meta[name="AdminCreation"]').attr("content");
        var serverStorageConfiguration = $('meta[name="ServerStorageConfiguration"]').attr("content");
        var serverDataStoreConfiguration = $('meta[name="ServerDataStoreConfiguration"]').attr("content");

        var setSystemSettingsUrl = "@Url.Action("SetSystemSettings", "ServerConfiguration")";
        var connectDatabaseUrl = "@Url.Action("ConnectDatabase", "ServerConfiguration")";
        var generateDatabaseUrl = "@Url.Action("GenerateDatabase", "ServerConfiguration")";
        var connectOracleDatabaseUrl = "@Url.Action("ConnectOracleDatabase", "ServerConfiguration")";
        var generateOracleDatabaseUrl = "@Url.Action("GenerateOracleDatabase", "ServerConfiguration")";
        var generateMySqlDatabaseUrl = "@Url.Action("GenerateMySqlDatabase", "ServerConfiguration")";
        var generatePostgreSqlDatabaseUrl = "@Url.Action("GeneratePostgreSqlDatabase", "ServerConfiguration")";
        var getAllDatabaseUrl = "@Url.Action("GetAllDatabase", "ServerConfiguration")";
        var generateSQLTablesUrl = "@Url.Action("GenerateTablesInDB", "ServerConfiguration")";
        var checkTableExistsUrl = "@Url.Action("CheckTableAlreadyExists", "ServerConfiguration")";
        var progressStatusUrl = "@Url.Action("ProgressStatus", "ServerConfiguration")";
         var deleteStatusUrl = "@Url.Action("DeleteProgressFile", "ServerConfiguration")";
        var storageType = "@ViewBag.StorageType";
        var blobDetails = "@Url.Action("GetAzureDetails", "TenantsManagement")";
        var blobExist = "@Url.Action("IsBlobExists", "ServerConfiguration")";
        var serverSetupImageUrl = "@Url.Content("~/images/" + GlobalAppSettings.Branding + "/application/server-startup-image.svg")";
        var adminSetupImageUrl = "@Url.Content("~/images/" + GlobalAppSettings.Branding + "/application/server-admin-setup.svg")";
        var storageUrl = "@Url.Content("~/images/" + GlobalAppSettings.Branding + "/application/file-storage-image.svg")";
        var offlineSetupImageUrl = "@Url.Content("~/images/static/startup/offline-setup.png")";
        var startupHome = "@Url.Content("~/images/static/startup/login-to-activate.png")";
        var isBoldBI = "@(GlobalAppSettings.BrandingDisplayName == AppBranding.Bold.DisplayName)".toLowerCase() == "true";
        var isAzureApplication = ("@ViewBag.IsAzureApplication".toLowerCase() === "true");
        var isBoldReports = "@(GlobalAppSettings.BrandingDisplayName == AppBranding.BoldReports.DisplayName)".toLowerCase() == "true";
        var selfHosted = ("@ViewBag.selfHosted".toLowerCase() === "true");
        var connectionType = "@connectionType";
        var storageAccountName = "@storageAccountName";
        var accessKey = "@Html.Raw(accessKey)";
        var blobServiceEndpoint = "@blobServiceEndpoint";
        var containerName = "@containerName";
        var updateLicenseKeyUrl = "@Url.Action("ApplyLicenseKey", "ServerConfiguration")";
        var validateLicenseKeyUrl = "@Url.Action("ValidateLicenseKey", "ServerConfiguration")";
        var hasDRMConfiguration = "@ViewBag.HasDRMConfiguration";

     setInterval(function () {
            $.ajax({
                type: "GET",
                url: progressStatusUrl,
                success: function (result) {
                    $(".deployment-status").text(result.Message);
                    $(".progressBar-container .progress-bar").width(result.Percentage);
                    if (result.Percentage == "100%") {
                        $.ajax({
                            type: "POST",
                            url: deleteStatusUrl,
                            success: function (data) {
                                if (data) {
                                    $(".progressBar-container .progress-bar").width("10%")
                                }
                            }
                        });
                    }
                }
            });
        }, 3000);

        $(document).ready(function () {
            $(document).click(function (e) {
                if (e.target.id != "info-icon") {
                    $('#prefix-message').css("display", "none");
                }
                if (e.target.id != "info-icon-postgressql") {
                    $('#prefix-message-postgresql').css("display", "none");
                }
            });
        });
    </script>
</head>
<body class="startup-page-container-body">
    @await Html.PartialAsync("_Header.OnpremiseStartup")
    <div class="system-startUp-settings-bg">
        <div class="startup-page-conatiner" id="startup-page-conatiner">
            <div id="system-settings-general" class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7" id="image-parent-container">
                    <div class="image-container">
                        <img class="startup-image" src="@Url.Content("~/images/static/startup/login-to-activate.png")" />
                        <div class="startup-content display-none">
                            <span class="first-content">[[[Step 1: Let’s configure your Bold ID server]]]</span>
                            <span class="second-content">[[[This is where we store user identities and ]]]@displayName [[[sites.]]]</span>
                            @if (!CloudAppConfig.IsHideHelpLink)
                            {
                                <a id="help-link" href="@(HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.IdDatabaseConfiguration))" target="_blank">[[[Need help?]]]</a>
                            }
                        </div>
                        <div class="welcome-content">
                            <span class="first-content">[[[See Clearly. Act Boldly.]]]</span>
                            @if (!CloudAppConfig.IsHideHelpLink)
                            {
                                <a href="@(HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.SetupHelp))" target="_blank">[[[Need setup help?]]]</a>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5" id="system-settings-welcome-container">
                    <div class="welcome-content">
                        <span class="first-content">[[[Welcome to ]]]<span>@displayName</span>[[[ @productName Server]]]</span>
                        <span class="second-content">
                            [[[To proceed with the installation, please activate your account.]]]
                        </span>
                        <div class="btn-holder">
                            <button type="button" id="online-license" license-service-url="@ViewBag.GetSubscruptionUrl" class="proceed-button content-display">[[[Log in to activate account]]]</button>
                        </div>
                        <div class="col-xs-12 align-center">
                            <span class="link-header">Behind a firewall? <a id="offline-license" class="link-decoration" data-offlinelicense-url="@HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.Downloads)" data-tenant-type="@((int)ViewBag.TenantType)">Upload your license file.</a></span>
                        </div>
                        <div class="divider-container col-xs-12">
                            <hr class="connect-line-left"><div class="content text-body">or Connect with</div><hr class="connect-line-right">
                        </div>
                        <div class="col-xs-12  align-center">
                            <span class="link-header">Don’t have an account? <a class="link-decoration" target="_blank" href="@HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.Pricing)">Sign Up</a></span>
                        </div>
                    </div>
                </div>
                <div class="system-settings-offline-license col-lg-5 col-md-5 col-sm-5 col-xs-5" id="system-settings-offline-license-container">
                    <div id="popup-container" class="col-xs-12 no-padding">
                        <div class="col-xs-12 upload-header no-padding">
                            <div class="col-xs-12 no-padding">
                                <span class="popup-title">[[[Offline Setup]]]</span>
                                <p class="title-description">Provide the @displayName license file downloaded from the website to proceed with the offline installation. If you do not have a license file, you can download it <a target="_blank" href="@HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.Downloads)">here</a>.</p>
                            </div>
                        </div>
                        <div class="col-xs-12 upload-content no-padding">
                            <div id="upload-section" class="col-xs-12 no-padding">
                                <div id="file-lable" class="col-xs-12">
                                    <label id="upload-lable">Select the License Key file</label>
                                </div>
                                <div class="upload-btn-wrapper col-xs-12 no-padding">
                                    <input type="text" id="file-name" class="col-xs-8" placeholder="[[[choose file]]]" readonly="readonly" />
                                    <img id="browse-lic" class="col-xs-4" src="~/images/common/folder.svg" />
                                    <input type='file' id="getFile" accept=".lic" class="display-none">
                                    <div id="tenant-type" class="display-none"></div>
                                    <div class="validation-error-message col-xs-12 display-none"></div>
                                </div>
                                <div id="license-details" class="col-xs-12">
                                    <div id="customer-email-container" class="col-xs-12 no-padding display-none">
                                        <label class="col-xs-4 no-padding license-detail-lable">Email</label>
                                        <p id="customer-email" class="col-xs-8 no-padding"></p>
                                    </div>
                                    <div id="subscription-id-container" class="col-xs-12 no-padding display-none">
                                        <label class="col-xs-4 no-padding  license-detail-lable">Subscription Id</label>
                                        <p id="subscription-id" class="col-xs-8 no-padding"></p>
                                    </div>
                                    <div id="subscription-name-container" class="col-xs-12 no-padding display-none">
                                        <label class="col-xs-4 no-padding  license-detail-lable">Subscription Name</label>
                                        <p id="subscription-name" class="col-xs-8 no-padding"></p>
                                    </div>
                                    <div id="plan-name-container" class="col-xs-12 no-padding display-none">
                                        <label class="col-xs-4 no-padding  license-detail-lable">Plan Name</label>
                                        <p id="plan-name" class="col-xs-8 no-padding"></p>
                                    </div>
                                    <div id="tenant-status-container" class="col-xs-12 no-padding display-none">
                                        <label class="col-xs-4 no-padding  license-detail-lable">Tenant Status</label>
                                        <p id="tenant-status" class="col-xs-8 no-padding">Licensed</p>
                                    </div>
                                    <div id="expiry-date-container" class="col-xs-12 no-padding display-none">
                                        <label class="col-xs-4 no-padding  license-detail-lable">Expiry Date</label>
                                        <p id="expiry-date" class="col-xs-8 no-padding"></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-12 upload-footer btn-holder">
                            <input id="return-startup-home" type="button" value="[[[Back]]]" onclick="returnStartupHome()" class="col-xs-6 secondary-button">
                            <input disabled id="confirm-license" type="button" value="[[[Next]]]" onclick="confirmLicenseUpdate()" class="col-xs-6 proceed-button">
                        </div>
                    </div>
                </div>
                <div class="system-settings-page-container col-lg-5 col-md-5 col-sm-5 col-xs-5" id="system-settings-db-selection-container">
                    <div class="system-settings-db-selection-field">
                        <input type="hidden" name="Ums_table_prefix" id="tenant-table-prefix" value="@DbTablePrefixes.TenantManagement" />
                        @if (ViewBag.AppConfigure == "true")
                        {
                            <div class="text-info bg-info client-config-info">[[[To configure ]]]<b>@ViewBag.AppName</b>[[[ you need to configure TenantServer first.]]]</div>
                        }
                        <div class="database-types">
                            <div class="center-align">
                                <div id="database-type-dropdown" class="system-settings-startup-page-fields txt-holder database-dropdown-margin">
                                    <label class="field-label">[[[Server type]]]</label>
                                    <span tabindex="0" class="info-icon su su-info" role="button" data-toggle="popover" data-placement="top" data-trigger="focus" data-html="true" data-content="[[[This database is to store metadata such as user identities and site information.]]]"></span>
                                    <select id="database-type" class="selectpicker system-settings-startup-page-fields db-fields" data-width="100%">
                                        <option class="no-margin-dropdown-ul" value="MSSQL">[[[Microsoft SQL Server / Azure SQL]]]</option>
                                        @if (ViewBag.IsNpgsqlExist)
                                        {
                                            <option class="no-margin-dropdown-ul" value="PostgreSQL">[[[Postgre SQL]]]</option>
                                        }
                                        else
                                        {
                                            <option class="no-margin-dropdown-ul" title="[[[Please install Npgsql client library to connect with PostgreSQL database.]]]" value="PostgreSQL" disabled>[[[Postgre SQL]]]</option>
                                        }

                                        <option class="no-margin-dropdown-ul" value="MySQL">[[[MySQL]]]</option>
                                        <option class="no-margin-dropdown-ul hide" value="MSSQLCE">[[[Embedded SQL CE]]]</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="sqlce-content hide">
                            <span>[[[This embedded SQL CE can be use only for testing purpose. Please choose the different database if you want to setup the application for production use.]]]</span>
                        </div>
                        <form id="db-content-holder" class="col-md-12 no-padding display-none content-display text-wrap show-sql-content" autocomplete="off">
                            <div class="txt-holder center-align">
                                <label class="field-label">[[[Server name]]]</label>
                                <input type="text" id="txt-servername" name="servername" class="form-control system-settings-startup-page-fields db-fields" placeholder="[[[Server name]]]" />
                                <span class="startup-validation validation-txt-errors"></span>
                            </div>
                            <div class="txt-holder center-align auth-type">
                                <label class="field-label">[[[Authentication type]]]</label>
                                <select id="check-windows" class="selectpicker db-fields" data-width="100%">
                                    <option value="sql">[[[SQL authentication]]]</option>
                                    <option value="windows">[[[Windows authentication]]]</option>
                                </select>
                                <div id="auth-type-info" class="hide">
                                    <p>[[[Please refer to]]] <a href="@HelpSiteManager.GetHelpSiteUrl(HelpSiteUrlNames.WindowsAuthentication)">[[[this]]]</a> [[[documentation to configure]]] @GlobalAppSettings.BrandingDisplayName [[[with Windows Authentication.]]]</p>
                                </div>
                            </div>
                            <div class="txt-holder center-align port-num hidden">
                                <label class="field-label">[[[Port number]]]</label>
                                <span tabindex="0" class="info-icon su su-info" role="button" data-toggle="popover" data-placement="top" data-trigger="focus" data-content="[[[Specify the TCP port number that the server is listening for connections. The default port number is 5432.]]]"></span>
                                <input type="text" id="txt-portnumber" name="portnumber" class="form-control system-settings-startup-page-fields db-fields" placeholder="[[[Port number]]]" />
                                <span class="startup-validation validation-txt-errors"></span>
                            </div>
                            <div class="txt-holder center-align maintenancedb hidden">
                                <label class="field-label">[[[Maintenance Database]]]</label>
                                <span tabindex="0" class="info-icon su su-info" role="button" data-toggle="popover" data-placement="top" data-trigger="focus" data-content="[[[The maintenance DB is a default database for users and applications to connect to. On PostgreSQL 8.1 and above, the maintenance DB is normally called ‘postgres’, and on earlier versions, ‘template1’.]]]"></span>
                                <input type="text" id="maintenance-db" name="maintenancedatabase" class="form-control system-settings-startup-page-fields db-fields" placeholder="[[[Maintenance Database]]]" />
                                <span class="startup-validation validation-txt-errors"></span>
                            </div>
                            <div class="txt-holder center-align">
                                <label class="field-label">[[[Username]]]</label>
                                <span tabindex="0" id="db-username-info" class="info-icon su su-info" role="button" data-toggle="popover" data-placement="top" data-trigger="focus" data-html="true" data-content="@serverUserHelp"></span>
                                <input type="text" id="txt-login" name="username" class="form-control system-settings-startup-page-fields db-fields" placeholder="[[[Username]]]" />
                                <span class="startup-validation validation-txt-errors"></span>
                            </div>
                            <div class="txt-holder center-align">
                                <label class="field-label">[[[Password]]]</label>
                                <input type="text" class="display-none">
                                <input type="password" class="fake-password" name="fake_passwordfield_to_turnoff_autocomplete">
                                <input type="password" id="txt-password-db" name="password" class="form-control system-settings-startup-page-fields db-fields" placeholder="[[[Password]]]" autocomplete="off" />
                                <span id="password-field" class="startup-validation validation-txt-errors"></span>
                                <div class="su su-eye show-hide-password"></div>
                            </div>
                            <div class="txt-holder center-align">
                                <div class="new-db">
                                    <input type="radio" id="new-db" class="css-radio" name="databaseType" value="0" checked='checked' />
                                    <label for="new-db"><span class="text">[[[New database]]]</span></label>
                                </div>
                                <div class="existing-db">
                                    <input type="radio" id="existing-db" class="css-radio" name="databaseType" value="1" />
                                    <label for="existing-db"><span class="text">[[[Existing database]]]</span></label>
                                </div>
                            </div>
                            <div class="txt-holder database-name center-align">
                                <label class="field-label">[[[Database name]]]</label>
                                <input type="text" id="txt-dbname" name="dbname" class="form-control system-settings-startup-page-fields dbname-fields db-fields" placeholder="[[[Database name]]]" />
                                <span class="startup-validation validation-txt-errors"></span>
                                <div class="show-hide-password"></div>
                                <span class="database-error validation-txt-errors"></span>
                            </div>
                            <div class="sql-server-existing-db center-align">
                                <div class="txt-holder databse-dropdown text-wrap database-dropdown-margin center-align">
                                    <label class="field-label">[[[Existing Database name]]]</label>
                                    <input type="text" id="database-name" name="databaseName" class="form-control system-settings-startup-page-fields db-fields" placeholder="[[[Existing database name]]]" />
                                    <span class="startup-validation validation-txt-errors"></span>
                                    <div class="show-hide-password"></div>
                                    <span class="database-error validation-txt-errors"></span>
                                </div>
                            </div>
                            <div class="secure-sql material-checkbox selfhosted center-align">
                                @Html.CheckBox("secure-sql-connection", false)
                                <label for="secure-sql-connection" class="">[[[Enable SSL]]]</label>
                            </div>
                        </form>

                        <div class="btn-holder center-align">
                            <button type="button" id="db-config-submit" class="proceed-button display-none content-display show-sql-content">[[[Next]]]</button>
                            <button type="button" id="sql-existing-db-submit" class="proceed-button display-none content-display">[[[Next]]]</button>
                            <button type="button" id="move-to-next" class="proceed-button content-display show-sqlce-content hide">[[[Next]]]</button>
                        </div>
                    </div>
                </div>
                @await Html.PartialAsync("_FileStorage")
                @await Html.PartialAsync("_UserAccount")
                <div id="messageBox">
                    <div class="message-header"></div>
                    <div class="message-box-close"></div>
                    <div class="message-content text-center"></div>
                    <div class="message-box-btn-holder"></div>
                </div>
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 display-none" id="progress-parent-container">
                    <div class="image-container">
                        <img class="startup-image" src="@Url.Content("~/images/" + GlobalAppSettings.Branding + "/application/server-deployment-image.svg")" />
                        <div class="progressBar-container">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 10%;">
                                </div>
                            </div>
                        </div>
                        <span class="deployment-status">[[[Fetching information...]]]</span>
                    </div>
                </div>
            </div>

        </div>
    </div>
</body>
</html>