<!DOCTYPE html>
@{
    Layout = null;
    var reportPath = string.Empty;
    var categoryName = string.Empty;
    var reportName = string.Empty;
    var datasourceName = string.Empty;
    var globalAppSettings = new TenantHandler().GetTenantConfig();
    var baseUrl = globalAppSettings.SystemSettings.BaseUrl;
    var reportServerApiUrl = new ReportServerApiEndPoints(globalAppSettings).ReportServerApiUrl();

    if (!string.IsNullOrWhiteSpace(ViewBag.datasourceName))
    {
        datasourceName = ViewBag.datasourceName;
    }

    var language = Context.GetPrincipalAppLanguageForRequest().GetCultureInfo();

    var cdnLink = globalAppSettings.SystemSettings.CDNLink;
    var faviconLogo = globalAppSettings.SystemSettings.FavIcon;
    var reportServiceUrl = ServerAppConfig.InternalAppDataServiceUrl;
}

<html lang="en" style="height:100%;width:100%">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width" />
    @if (ViewBag.datasetName != null)
    {
        <title>@ViewBag.datasetName - [[[Design Dataset]]] - @globalAppSettings.SystemSettings.OrganizationName</title>
    }
    else
    {
        <title>Untitled - [[[Design Dataset]]] - @globalAppSettings.SystemSettings.OrganizationName</title>
    }

    @if (ServerAppConfig.IsSelfHosted)
    {
        @Styles.Render("~/styles/report-designer")
        @Styles.Render("~/styles/designer")
        <link href="~/Content/Styles/EssentialJS/ej2-base.css" rel="stylesheet" />
        <link href="~/Content/Styles/EssentialJS/ej2-notifications.css" rel="stylesheet" />
        @Scripts.Render("~/scripts/report-designer")
        <script type="text/javascript" src="~/Scripts/EssentialJS/common/ej2-base.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/common/ej2-pdf-export.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/common/ej2-data.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/common/ej2-svg-base.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/data-visualization/ej2-circulargauge.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/data-visualization/ej2-lineargauge.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/data-visualization/ej2-maps.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/ej2-popups.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/ej2-notifications.min.js"></script>
        @Scripts.Render("~/scripts/report-designer-service")
        <script src="~/Scripts/Localization/querydesigner/ej.localetexts.@string.Concat(language,".js")"></script>
    }
    else
    {
        @Styles.Render("~/styles/report-designer")
        <link href="@ServerAppConfig.ReportServiceCdnLink/extensions/barcode.reportitem.css" rel="stylesheet" />
        <link href="@ServerAppConfig.ReportServiceCdnLink/content/reportdesigner/bootstrap-theme/bold.reportdesigner.min.css" rel="stylesheet" />
        @Styles.Render("~/styles/designer")
        <link href="@ServerAppConfig.StaticCdnLink/content/ej2-base.css" rel="stylesheet" />
        <link href="@ServerAppConfig.StaticCdnLink/content/ej2-notifications.css" rel="stylesheet" />
        @Scripts.Render("~/scripts/report-designer")
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/common/ej2-base.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/common/ej2-pdf-export.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/common/ej2-data.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/common/ej2-svg-base.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/data-visualization/ej2-circulargauge.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/data-visualization/ej2-lineargauge.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/data-visualization/ej2-maps.min.js'></script>
        <script type="text/javascript" src="@ServerAppConfig.StaticCdnLink/scripts/ej2-popups.min.js"></script>
        <script type="text/javascript" src="@ServerAppConfig.StaticCdnLink/scripts/ej2-notifications.min.js"></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/bold.reportviewer.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/bold.reportdesigner.min.js'></script>
        @Scripts.Render("~/scripts/report-designer-service")
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/businessobject.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/extension.config.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/odata.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/mysql.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/psql.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/qrbarcode.reportitem.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/queryinputdialog.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/ssas.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/webapi.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/barcode.reportitem.js'></script>
    }

    <link rel="icon" href="@faviconLogo" onerror="if (this.href !== null && this.href.toLowerCase() !== '@cdnLink/images/application/@ServerAppConfig.AppBranding/@IconFileNames.Favicon') this.href = '@cdnLink/images/application/@ServerAppConfig.AppBranding/@IconFileNames.Favicon';" />

    <style>
        .e-querydesigner-toolbarcontainer ul:nth-of-type(2) {
            display: none;
        }
    </style>
    <script>
        var controlId = 'container';
		var isEditReport = false;

        var designerToken = "@ViewBag.AccessToken";
        var categoryName = "@categoryName";
        var reportName = "@reportName";
        var datasetName = "@ViewBag.datasetName";
        var description = "@ViewBag.description";
        var isEdit = "@ViewBag.isEdit";
		var datasource = "@ViewBag.datasourceName";
        isEdit = isEdit.toLowerCase();

		if(isEdit === "true"){
		    isEditReport = true;
        }

        var serviceUrl = "@reportServiceUrl.TrimEnd('/')" + "/api/Designer";
        var isSubmit = true;
		var ctrlId = 'container';

		$(document).ready(function () {
            renderQueryDesigner();

            $(document).on("click", "#btn-item-preview", function () {
                $("#btn-item-design").show();
                $(".design-item").css("display", "block");
                $("#btn-item-preview").hide();
                $(".preview-item").css("display", "none");
            });
            $(document).on("click", "#btn-item-design", function () {
                $("#btn-item-preview").show();
                $(".preview-item").css("display", "block");
                $("#btn-item-design").hide();
                $(".design-item").css("display", "none");
            });
        });

		function renderQueryDesigner() {
        var designerModel = {
            serviceUrl: serviceUrl,
        toolbarSettings: {
            items: ej.QueryDesigner.ToolbarItems.All & ~ej.QueryDesigner.ToolbarItems.Cancel & ~ej.QueryDesigner.ToolbarItems.Save & ~ej.QueryDesigner.ToolbarItems.InputDataSet
        },
        create: $.proxy(controlInitialization, this),
        toolbarRendering: $.proxy(renderQueryToolbar, this),
        reportServerUrl: "@reportServerApiUrl",
        serviceAuthorizationToken: designerToken,
        locale: '@language'
       };
        var designer = new boldReportQueryDesigner($('#' + ctrlId), designerModel);
        }

	   function controlInitialization(args) {
		if(isEditReport){
           editDataSet(datasetName);
		}else{
		    newDataSet(datasource);
		}
      }

	  function renderQueryToolbar(args) {
    var $divsave = ej.buildTag('div', '', { 'margin': '1px 5px', 'float': 'left', 'display': 'inline-block', 'padding-top': '0.5px' }, {});
    var saveButton = this.btnSaveTag = ej.buildTag('button.e-reportdesigner-dataset-btn', 'Save', {}, { id: ctrlId + '_query_save_btn' });
    $divsave.append(saveButton);
    $(args.target).find('#' + ctrlId + '_div_dataset_save').before($divsave);
    saveButton.ejButton({
        width: '78px', showRoundedCorner: false, size: 'mini',
        contentType: ej.ContentType.TextOnly, 'height': '25px',
        'click': $.proxy(this.saveQueryDataSet, this)
    });
}

function saveQueryDataSet(event) {
    var queryDesigner = $('#' + ctrlId).data('boldReportQueryDesigner');
    queryDesigner.getDataSet(function (args) {
        doAjaxPost(serviceUrl + '/PostDesignerAction/', JSON.stringify({
            'designerAction': isEditReport ? 'SaveSharedDataSet' : 'CreateSharedDataSet',
            'sharedData': args.newSharedDataSet,
            'name': datasetName,
            'sharedDataMapping': args.sharedDataMapping
        }), {
            fnction: function (args) {
                if (args && typeof (args) === 'string' && args.indexOf('Sf_Exception') !== -1) {
                    alertMessage(false)
                } else {
                    alertMessage(true);
                    if (!isEditReport) {
                        isEditReport = true;
                    }
                }
            },
            indicator: [function () {
                    $('#' + ctrlId + '_div_designerArea').data('ejWaitingPopup').show();
                },
                function () {
                    $('#' + ctrlId + '_div_designerArea').data('ejWaitingPopup').hide();
                }]
        });
    });
}

function alertMessage(status) {
    var toastMessage;
    var className;
    var toastTitle;
    if (status) {
        if (isEditReport) {
            toastMessage = '[[[DataSet has been updated successfully]]]';
        } else {
            toastMessage = '[[[DataSet has been added successfully]]]';
        }
        className = 'e-toast-success';
        toastTitle = '[[[Success!]]]';
    } else {
        if (isEditReport) {
            toastMessage = '[[[An error occured to update the dataset]]]';
        } else {
            toastMessage = '[[[An error occured to add the dataset]]]';
        }
        className = 'e-toast-danger';
        toastTitle = '[[[Error!]]]';
    }
    var toast = new ejs.notifications.Toast({
        title: toastTitle,
        content: toastMessage,
        target: document.body,
        cssClass: className,
        timeOut: 3000,
        position: { X: 'Right', Y: 'Top' },
        showCloseButton: true,
        newestOnTop: true,
        animation: {
            hide: { effect: 'SlideRightOut' },
            show: { effect: 'SlideRightIn' }
        }
    });
    toast.appendTo('#toast-message-container');
    toast.show();
}

function newDataSet(selectData) {
    var designer = $('#' + ctrlId).data('boldReportQueryDesigner');
    doAjaxPost(serviceUrl + '/PostDesignerAction/', JSON.stringify({
        'designerAction': ej.ReportUtil.DesignerAction.dataSourceCatalog,
    }), {
        fnction: function (args) {
            var dataSources = [];
            for (var index = 0; index < args.length; index++) {
                var dataSource = ej.ReportUtil.createDataSource();
                dataSource.ConnectionProperties = null;
                dataSource.DataSourceReference = args[index].Id;
                dataSource.Name = args[index].Name;
                dataSources.push(dataSource);
            }
            designer.datasetName = datasetName;
            designer.newDataSet(selectData, dataSources);
        },
        indicator: [function () {
                $('#' + ctrlId + '_div_designerArea').data('ejWaitingPopup').show();
            },
            function () {
                $('#' + ctrlId + '_div_designerArea').data('ejWaitingPopup').hide();
            }]
    });
}

function editDataSet(dataSetName) {
    var queryDesigner = $('#' + ctrlId).data('boldReportQueryDesigner');
    doAjaxPost(serviceUrl + '/PostDesignerAction/', JSON.stringify({
        'designerAction': ej.ReportUtil.DesignerAction.dataSourceCatalog,
    }), {
        fnction: function (args) {
            var dataSources = [];
            for (var index = 0; index < args.length; index++) {
                var dataSource = ej.ReportUtil.createDataSource();
                dataSource.ConnectionProperties = null;
                dataSource.DataSourceReference = args[index].Id;
                dataSource.Name = args[index].Name;
                dataSources.push(dataSource);
            }
            editSharedDataSet(dataSetName, dataSources);
        },
        indicator: [function () {
                $('#' + ctrlId + '_div_designerArea').data('ejWaitingPopup').show();
            },
            function () {
                $('#' + ctrlId + '_div_designerArea').data('ejWaitingPopup').hide();
            }]
    });
}

function downloadDataSet() {
    var queryDesigner = $('#' + ctrlId).data('boldReportQueryDesigner');
    queryDesigner.getDataSet(function (args) {
        ej.ReportUtil.doPostBack(serviceUrl + '/PostDesignerAction/', { 'name': args.newSharedDataSet.Name + '.rsd', 'sharedData': JSON.stringify(args.newSharedDataSet) }, queryDesigner);
    });
}

function editSharedDataSet(dataSetName, dataSources) {
    var queryDesigner = $('#' + ctrlId).data('boldReportQueryDesigner');
    doAjaxPost(serviceUrl + '/PostDesignerAction/', JSON.stringify({
        'designerAction': ej.ReportUtil.DesignerAction.sharedDataSet,
        'reportInfo': {
            'dataSetRefer': dataSetName
        }
    }), {
            fnction: function (args) {
            queryDesigner.datasetName = datasetName;
            queryDesigner.editDataSet(args, dataSources);
        },
        indicator: [function () {
                $('#' + ctrlId + '_div_designerArea').data('ejWaitingPopup').show();
            },
            function () {
                $('#' + ctrlId + '_div_designerArea').data('ejWaitingPopup').hide();
            }]
    });
}

function doAjaxPost(url, jsonObj, callBack) {
    $.ajax({
        type: 'POST',
        url: url,
        async: true,
        crossDomain: true,
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        data: jsonObj,
        beforeSend: function (req) {
            req.setRequestHeader('ServerUrl', '@reportServerApiUrl');
            req.setRequestHeader('serviceAuthorizationToken', designerToken);
            if (callBack && callBack.indicator && callBack.indicator.length > 0) {
                ej.ReportUtil.invokeCallBack(callBack.indicator[0], {});
            }
        },
        success: function (data) {
            if (data && typeof (data.Data) !== 'undefined') {
                data = data.Data;
            }
            var jsonData = data;
            if (callBack) {
                if (callBack.indicator && callBack.indicator.length > 0) {
                    ej.ReportUtil.invokeCallBack(callBack.indicator[1], {});
                }
                if (callBack.fnction) {
                    ej.ReportUtil.invokeCallBack(callBack.fnction, jsonData);
                }
            }
        },
        error: function (msg, textStatus, errorThrown) {
            if (callBack && callBack.indicator && callBack.indicator.length > 0) {
                ej.ReportUtil.invokeCallBack(callBack.indicator[1], {});
            }
        }
    });
}
    </script>
</head>
<body style="overflow:hidden;position:static;margin:0; padding: 0;height:100%;width:100%">
    <div id="toast-message-container"></div>
    <div id="container" style="height:100%;width:100%"></div>
</body>
</html>