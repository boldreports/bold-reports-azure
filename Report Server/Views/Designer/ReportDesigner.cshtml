<!DOCTYPE html>
@using Newtonsoft.Json
@using Syncfusion.Server.Base.Environment
@{
    Layout = null;
    var reportPath = string.Empty;
    var categoryName = string.Empty;
    var reportName = string.Empty;
    var globalAppSettings = new TenantHandler().GetTenantConfig();
    var tenantAppConfiguration = new TenantAppConfiguration(globalAppSettings);
    var language = Context.GetPrincipalAppLanguageForRequest().GetCultureInfo();
    var baseUrl = globalAppSettings.SystemSettings.BaseUrl;
    var reportServerApiUrl = new ReportServerApiEndPoints(globalAppSettings).ReportServerApiUrl();
    var reportServiceUrl = ServerAppConfig.InternalAppDataServiceUrl.TrimEnd('/') + "/api/Designer";
    if (!string.IsNullOrWhiteSpace(ViewBag.categoryName) && !string.IsNullOrWhiteSpace(ViewBag.reportName))
    {
        categoryName = ViewBag.categoryName;
        reportName = ViewBag.reportName;
        reportPath = ViewBag.categoryName + "/" + ViewBag.reportName;
    }

    var oraganisationName = globalAppSettings.SystemSettings.OrganizationName;
}

<html lang="en" style="height:100%;width:100%">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width" />
    @if (ViewBag.reportName != null)
    {
        <title>@ViewBag.reportName - [[[Design Report]]] - @globalAppSettings.SystemSettings.OrganizationName</title>
    }
    else
    {
        <title>Untitled - [[[Design Report]]] - @globalAppSettings.SystemSettings.OrganizationName</title>
    }

    @if (ServerAppConfig.IsSelfHosted)
    {
        @Styles.Render("~/styles/report-designer")
        @Styles.Render("~/styles/designer")
        <link href="~/Content/Styles/EssentialJS/ej2-base.css" rel="stylesheet" />
        <link href="~/Content/Styles/EssentialJS/ej2-notifications.css" rel="stylesheet" />
        @Scripts.Render("~/scripts/report-designer")
        <script type="text/javascript" src="~/Scripts/EssentialJS/common/ej2-base.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/common/ej2-pdf-export.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/common/ej2-data.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/common/ej2-svg-base.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/data-visualization/ej2-circulargauge.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/data-visualization/ej2-lineargauge.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/data-visualization/ej2-maps.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/ej2-popups.min.js"></script>
        <script type="text/javascript" src="~/Scripts/EssentialJS/ej2-notifications.min.js"></script>
        @Scripts.Render("~/scripts/report-designer-service")
        <script src="~/Scripts/Localization/ReportDesigner/ej.localetexts.@string.Concat(language,".js")"></script>
    }
    else
    {
        @Styles.Render("~/styles/report-designer")
        <link href="@ServerAppConfig.ReportServiceCdnLink/extensions/barcode.reportitem.css" rel="stylesheet" />
        <link href="@ServerAppConfig.ReportServiceCdnLink/content/reportdesigner/bootstrap-theme/bold.reportdesigner.min.css" rel="stylesheet" />
        @Styles.Render("~/styles/designer")
        <link href="@ServerAppConfig.StaticCdnLink/content/ej2-base.css" rel="stylesheet" />
        <link href="@ServerAppConfig.StaticCdnLink/content/ej2-notifications.css" rel="stylesheet" />
        @Scripts.Render("~/scripts/report-designer")
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/common/ej2-base.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/common/ej2-pdf-export.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/common/ej2-data.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/common/ej2-svg-base.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/data-visualization/ej2-circulargauge.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/data-visualization/ej2-lineargauge.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/data-visualization/ej2-maps.min.js'></script>
        <script type="text/javascript" src="@ServerAppConfig.StaticCdnLink/scripts/ej2-popups.min.js"></script>
        <script type="text/javascript" src="@ServerAppConfig.StaticCdnLink/scripts/ej2-notifications.min.js"></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/bold.reportviewer.min.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/scripts/bold.reportdesigner.min.js'></script>
        @Scripts.Render("~/scripts/report-designer-service")
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/businessobject.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/extension.config.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/odata.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/mysql.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/psql.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/qrbarcode.reportitem.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/queryinputdialog.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/ssas.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/webapi.data.js'></script>
        <script type='text/javascript' src='@ServerAppConfig.ReportServiceCdnLink/extensions/barcode.reportitem.js'></script>
    }

    <link rel="icon" href="@Url.Content(globalAppSettings.SystemSettings.FavIcon)" onerror="if (this.href != '~/Content/Images/Application/Favicon.png') this.href = '~/Content/Images/Application/Favicon.png';" />


    <style>
        body {
            background-color: transparent;
        }

        #messageBox {
            width: 100% !important;
        }

        .message-header {
            width: 100% !important;
        }

        .btn-link:focus {
            text-decoration: none;
        }

        .btn-link:hover {
            text-decoration: underline;
        }

        #messageBox_wrapper {
            height: 200px !important;
        }

        .message-content {
            margin-top: 27px !important;
        }

        .e-rptdesigner-header-selection {
            background: #0565ff !important;
            color: #ffffff !important;
            border-color: #0565ff !important;
            font-weight: 600 !important;
        }

        .e-rptdesigner.e-publish-btn-wrapper .e-split {
            border: 1px solid #0565ff;
            background: #fff;
            border-radius: 3px;
            float: left;
        }

        .e-rptdesigner.e-publish-btn-wrapper .e-split-btn.e-drp-btn {
            border: none;
            background: #fff;
            border-left: 1px solid #0565ff;
        }

        .e-rptdesigner.e-publish-btn-wrapper .e-split-btn.e-btn .e-btn-span {
            float: left;
            margin-left: 2px;
        }

        .e-rptdesigner.e-publish-btn-wrapper .e-btn.e-select .e-icon,
        .e-rptdesigner.e-publish-btn-wrapper .e-btn.e-select.e-disable:hover .e-icon,
        .e-rptdesigner.e-publish-btn-wrapper .e-btn.e-select.e-disable:hover {
            color: #0565ff !important;
        }

        .e-rptdesigner.e-publish-btn-wrapper .e-btn {
            padding: 0px;
            line-height: 0px;
        }

        .e-rptdesigner.e-publish-btn-wrapper .e-icon.e-arrow-sans-down:before {
            padding-top: 3px;
        }

        .e-rptdesigner.e-publish-btn-wrapper .e-split-btn.e-left-btn {
            border: none !important;
            letter-spacing: .5px;
            font-size: 13px;
            cursor: pointer;
            padding: 0.4em;
            color: #0162ff;
            background: #ffffff;
        }

            .e-rptdesigner.e-publish-btn-wrapper .e-split-btn.e-left-btn:not('e-disable'):hover,
            .e-rptdesigner.e-publish-btn-wrapper .e-split-btn.e-drp-btn:not('e-disable'):hover,
            .e-rptdesigner.e-publish-btn-wrapper .e-split-btn.e-left-btn:active,
            .e-rptdesigner.e-publish-btn-wrapper .e-split-btn.e-drp-btn:active {
                background: #f0f6ff;
            }

        .e-publish-menu-ul.e-menu.e-context {
            width: 120px !important;
        }

        .e-rptdesigner-header-design,
        .e-rptdesigner-header-preview {
            height: 28px;
            width: 88px;
            float: left;
            display: inline-block;
            text-align: center;
            cursor: pointer;
            font-size: 13px;
            border: 0.5px solid #b3b3b3;
            background: #ffffff;
            padding: 4px 0px;
        }

        .e-rptdesigner-header-design {
            border-bottom-left-radius: 4px;
            border-top-left-radius: 4px;
        }

        .e-rptdesigner-header-preview {
            border-bottom-right-radius: 4px;
            border-top-right-radius: 4px;
        }

        .e-designer-viewCheck:before {
            padding-left: 0px !important;
            padding-top: 3px !important;
        }

        .e-designer-draft-status-success.e-designer-viewCheck:before {
            visibility: visible;
            color: #4dd964;
        }

        .e-designer-draft-status-progress.e-designer-viewCheck:before {
            visibility: visible;
            color: #5d5d5d;
        }

        .e-designer-draft-status-text {
            color: #5d5d5d;
            font-size: 12px;
            margin-left: 2px;
        }

        .e-designer-new-folder-btn {
            overflow: hidden !important;
            white-space: nowrap !important;
            -ms-text-overflow: ellipsis !important;
            line-height: normal !important;
            height: 28px !important;
            width: 120px !important;
            max-width: 120px;
            font-weight: 400 !important;
            font-size: 11px !important;
            border-radius: 4px !important;
            padding-bottom: 0.2em !important;
        }

        .e-designer-header ::placeholder {
            font-style: normal !important;
        }

        .e-designer-header ::-webkit-input-placeholder {
            font-style: normal !important;
        }

        .e-designer-header :-ms-input-placeholder {
            font-style: normal !important;
        }
    </style>

    <script>
        var getUserNotificationsPartialViewResultUrl = "@Url.Action("GetUserNotificationsPartialViewResult", "notification")";
        var addCategoryUrl = "@Url.Action("addcategory", "category")";
        var rootUrlAction = "@Url.Action("", "")";
        var controlId = 'container';
        var isEditReport = false;
        var webApiQueryDialog = null;
        var relativeDateTimer = null;

        var categoryName = "@ViewBag.categoryName";
        var categoryId = "";
        var reportId = "@ViewBag.ReportId";
        var reportName = "@ViewBag.reportName";
        var datasetName = "@ViewBag.datasetId";
        var description = "@ViewBag.description";
        var isPublic = "@ViewBag.isPublic";
        isPublic = isPublic.toLowerCase();
        var isDraft = "@ViewBag.isDraft";
        var version = "@ViewBag.Version";
        isDraft = isDraft.toLowerCase();
        var isAdmin = "@ViewBag.IsAdmin";
        isAdmin = isAdmin.toLowerCase();
        var canMarkReportAsPublic = "@ViewBag.CanMarkReportAsPublic";
        canMarkReportAsPublic = canMarkReportAsPublic.toLowerCase();
        var warningMessage = isAdmin == "true" ? "[[[Public reports are disabled in]]] <a href='" + rootUrlAction + "/administration/report-settings' target='_blank'> [[[report settings]]]" : "[[[Public Reports are disabled by the system administrator. Please contact your system administrator to enable this.]]]";
        var isEdit = "@ViewBag.isEdit";
        isEdit = isEdit.toLowerCase();
        var pageTitle = "@oraganisationName";

        if(isEdit === "true"){
            isEditReport = true;
        }

        canMarkReportAsPublic = (canMarkReportAsPublic === "true") ? true : false;
        isPublic = (isPublic === "true") ? true : false;
        var isSubmit = true;
        var designerToken = "@ViewBag.AccessToken";

        $(document).ready(function () {
            renderDesignerHeader();
            refreshReportDesignerFooter();
            renderDesigner();
            $(window).resize(refreshReportDesignerFooter);
        });

        function refreshReportDesignerFooter() {
            var windowHeight = $(window).innerHeight();
            var headerHeight = $("#" + controlId + "_designer_header").outerHeight();
            var containerHeight = windowHeight - headerHeight;
            $("#container").height(containerHeight);
            $("#container").width($(window).width());
        }

        function renderDesigner() {
            var qryOptions = null;
            $(document.body).bind('submit', $.proxy(this.formSubmit, this));
            $(window).bind('beforeunload', $.proxy(this.windowUnload, this));

            if (!webApiQueryDialog && window.QueryInputDialog) {
                webApiQueryDialog = new QueryInputDialog($('#' + controlId));
            }
            if (webApiQueryDialog) {
                qryOptions = {
                    toolbarRendering: $.proxy(webApiQueryDialog.renderToolbarItems, webApiQueryDialog),
                    datasetLoaded: $.proxy(webApiQueryDialog.enableButton, webApiQueryDialog),
                    dataModeChanged: $.proxy(webApiQueryDialog.enableButton, webApiQueryDialog)
                };
            }

            var designerModel = {
                enableAutoDraft: true,
                serviceUrl: "@reportServiceUrl",
                ajaxBeforeLoad: ajaxBeforeSend,
                reportServerUrl: "@reportServerApiUrl",
                create: $.proxy(controlInitialized, this),
                reportSaved: $.proxy(reportSaved, this),
                destroy: $.proxy(destroyComponent, this),
                serviceAuthorizationToken: designerToken,
                toolbarSettings: {
                    items: ej.ReportDesigner.ToolbarItems.All & ~ej.ReportDesigner.ToolbarItems.New
                        & ~ej.ReportDesigner.ToolbarItems.Open & ~ej.ReportDesigner.ToolbarItems.Save
                        & ~ej.ReportDesigner.ToolbarItems.Preview & ~ej.ReportDesigner.ToolbarItems.EditDesign
                },
                queryDesignerOptions: qryOptions,
                locale: '@language',
                reportDataExtensions: window.dataExtensions,
                reportItemExtensions: window.itemExtensions,
                queryDesignerAction: disableDesignerHeaderPane,
                mapShapData: window.ShapData
            };

            var designer = new boldReportDesigner($('#' + controlId), designerModel);
        }

        function controlInitialized(args) {
            var designer = $('#' + controlId).data('boldReportDesigner');
            $('#' + controlId + '_designer_header_reportName').val(reportName);
            designer.openAction = $.proxy(openBrowseDialog, this);
            designer.showImportData = true;
            if (isDraft === 'true') {
                designer.openReportFromDraft(reportName);
            } else if (isEditReport) {
                var reportPath = (categoryName ? categoryName + '/' : '') + reportName;
                designer.openReport(reportPath);
            } else {
                var hasDataSet = datasetName && datasetName.length > 0 ? true : false;
                var hasCatagory = categoryName && categoryName.length > 0 ? true : false;
                if (hasDataSet) {
                    var newTitle = reportName + ' - Design Report -' + pageTitle;
                    document.title = newTitle;
                    history.pushState('', newTitle, window.location.href.split("report-designer")[0] + "report-designer" + '/' + reportId + '/' + categoryName + '/' + reportName);
                    designer.newServerReport(reportName, datasetName);
                } else if (hasCatagory) {
                    designer.newServerReport(reportName);
                } else {
                    this.newUntitledReport();
                }
            }
        }

        function ajaxBeforeSend(args) {
            if (args.headers) {
                args.headers.push({ Key: 'ReportId', Value: reportId });
            }
            if (args.actionType === 'openServerReport' || args.actionType === 'saveServerReport'
                || args.actionType === 'createServerReport' || args.actionType === 'CheckDraftReport') {
                var reportServerData = {
                    'category': categoryName,
                    'categoryId': categoryId,
                    'reportName': reportName,
                    'version': version,
                    'description': description,
                    'isPublic': isPublic,
                    'isDraft': isDraft === 'true',
                    'isEdit': isEditReport
                };

                args.data = reportServerData;
            }

            if (args.actionType === 'AutoDraftReport') {
                $('#' + controlId + '_design_header_draft_icon').removeClass('e-designer-draft-status-success').addClass('e-designer-draft-status-progress');
                $('#' + controlId + '_design_header_draft_status').text('[[[Saving draft...]]]');
            }
        }

        function formSubmit(args) {
            isSubmit = false;
        }

        function destroyComponent(args) {
            var designer = $('#' + controlId).data('boldReportDesigner');
            designer.destroy();
        }

        function reportSaved(args) {
            if (args.reportAction == 'Saved' && args.status == false) {
                alertMessage(false);
                return;
            }
            reportId = args.publishId ? args.publishId : reportId;
            version = args.version ? args.version : null;
            var newTitle = reportName + ' - Design Report -' + pageTitle;
            var designer = $('#' + controlId).data('boldReportDesigner');
            isEditReport = true;
            if (args.reportAction === 'AutoDraft') {
                updateAutoSavedTime(args.status);
                $('#' + controlId + '_design_header_draft_status').attr({ 'data-datetime': (new Date()).toISOString() });
                if (relativeDateTimer == null) {
                    relativeDateTimer = initializeRelativeTimer();
                }
            } else {
                document.title = newTitle;
                var trimmedCategoryName = categoryName.split('/');
                if (trimmedCategoryName.length > 1) {
                    categoryName = trimmedCategoryName[1];
                }
                if (isDraft === 'false' && version) {
                    history.pushState('', newTitle, window.location.href.split("report-designer")[0] + "report-designer" + '/' + reportId + '/' + categoryName + '/' + reportName + '?v=' + version);
                } else {
                    history.pushState('', newTitle, window.location.href.split("report-designer")[0] + "report-designer" + '/' + reportId + '/' + categoryName + '/' + reportName);
                }
                isDraft = designer.isNewServerReport().toString();
                alertMessage(true);
            }
        }

        function alertMessage(status) {
            var toastMessage;
            var className;
            var toastTitle;
            if (status) {
                toastMessage = '[[[Report has been published successfully]]]';
                className = 'e-toast-success';
                toastTitle = '[[[Success!]]]';
            } else {
                toastMessage = '[[[An error occured while publishing the report.]]]';
                className = 'e-toast-danger';
                toastTitle = '[[[Error!]]]'
            }
            var toast = new ejs.notifications.Toast({
                title: toastTitle,
                content: toastMessage,
                target: document.body,
                cssClass: className,
                timeOut: 3000,
                position: { X: 'Right', Y: 'Top' },
                showCloseButton: true,
                newestOnTop: true,
                animation: {
                    hide: { effect: 'SlideRightOut' },
                    show: { effect: 'SlideRightIn' }
                }
            });
            toast.appendTo('#toast-message-container');
            toast.show();
        }

        function initializeRelativeTimer() {
            return setTimeout(
                $.proxy(function(){
                        updateAutoSavedTime(true);
                        clearTimeout(relativeDateTimer);
                        relativeDateTimer = initializeRelativeTimer();
                    },
                    this),
                60000);
        }

        function newUntitledReport() {
            var designer = $('#' + controlId).data('boldReportDesigner');
            categoryName = null;
            datasetName = null;
            description = null;
            reportName = 'Untitled';
            isEditReport = false;
            var newTitle = reportName + ' - Design Report -' + pageTitle;
            document.title = newTitle;
            if (categoryName) {
                history.pushState('', newTitle, window.location.href.split("report-designer")[0] + "report-designer" + '/' + reportId + '/' + categoryName + '/' + reportName);
            } else {
                history.pushState('', newTitle, window.location.href.split("report-designer")[0] + "report-designer" + '/' + reportId + '/' + reportName);
            }
            designer.newReport(reportName);
        }

        function saveAsServer(name, category, catId, reportDescription, isMarkPublic) {
            var designer = $('#' + controlId).data('boldReportDesigner');
            categoryName = category;
            categoryId = catId;
            reportName = name;
            description = reportDescription;
            isPublic = isMarkPublic;
            designer.reportFileName = reportName;
            designer.saveReport(categoryName + '/' + reportName);
            $('#' + controlId + '_designer_header_reportName').val(reportName);
        }

        function browseReport(isPublish) {
            var designer = $('#' + controlId).data('boldReportDesigner');
            var proxy = this;
            if (designer.isNewServerReport() || isDraft === 'true' || !isPublish || reportName !== designer.reportFileName) {
                designer.openPublishDialog(description, isPublic, function (args) {
                    if (args['type'] === 'Save') {
                        proxy.saveAsServer(args.name, args.category, args.categoryId, args.description, args.isPublic);
                    }
                }, canMarkReportAsPublic, warningMessage);
            } else {
                designer.saveReport();
                $('#' + controlId + '_designer_header_reportName').val(reportName);
            }
        }

        function windowUnload(args) {
            var designer = $('#' + controlId).data('boldReportDesigner');
            if (designer.hasReportChanges() && isSubmit) {
                return 'Changes you made may not be saved';
            }
            isSubmit = true;
        }

        function renderDesignerHeader() {
            var divouter = ej.buildTag('div.e-designer-header', '', {
                'height': '40px',
                'width': '100%',
                'overflow': 'hidden',
                'box-sizing': 'border-box',
                'padding': '0px 10px',
                'background': '#ffffff'
            },
                {
                    'id': controlId + '_designer_header'
                });
            $('#' + controlId).before(divouter);
            var backArrowOuterDiv = ej.buildTag('div', '', {
                'height': '100%',
                'width': '30px',
                'display': 'table',
                'float': 'left'
            },
                {
                    'id': controlId + '_designer_header_backarrow_div'
                });
            var backArrowInnerDiv = ej.buildTag('div', '', {
                'display': 'table-cell',
                'vertical-align': 'middle',
                'text-align': 'center',
                'padding-top': '2px'
            });
            var backArrowEle = ej.buildTag(
                'span.e-rptdesigner-headericon e-rptdesigner-data-icon e-reportdesigner-backarrow',
                '',
                {
                    'padding': '5px',
                    'cursor': 'pointer'
                },
                {
                    'id': controlId + '_designer_header_backarrow'
                });
            backArrowOuterDiv.append(backArrowInnerDiv);
            backArrowInnerDiv.append(backArrowEle);
            backArrowEle.bind('click', backToServer);
            var reportNameOuterDiv = ej.buildTag('div', '', {
                'height': '100%',
                'width': '180px',
                'display': 'table',
                'float': 'left',
                'padding': '0px 6px'
            });
            var reportNameInnerDiv = ej.buildTag('div', '', {
                'display': 'table-cell',
                'vertical-align': 'middle',
                'text-align': 'center'
            });
            var rptNameEle = ej.buildTag(
                'input.e-rptdesigner-inputPath e-textbox e-designer-fontfamily',
                '',
                {
                    'height': '28px',
                    'width': '180px',
                    'border': '1px solid #c8c8c8',
                    'font-size': '12px',
                    'letter-spacing': '0.3px',
                    'border-radius': '4px'
                },
                {
                    'id': controlId + '_designer_header_reportName',
                    'spellcheck': 'false', 'type': 'text',
                    'placeholder': '[[[Report Name]]]'
                });
            reportNameOuterDiv.append(reportNameInnerDiv);
            reportNameInnerDiv.append(rptNameEle);
            rptNameEle.bind('blur', textFocusOut);
            rptNameEle.bind('keyup', textKeyup);
            var draftDiv = ej.buildTag('div', '', {
                'height': '100%',
                'display': 'table',
                'float': 'left'
            }, {
                    'id': controlId + '_design_header_draft_div'
                });

            var draftInnerDiv = ej.buildTag('div', '', {
                'display': 'table-cell',
                'vertical-align': 'middle',
                'text-align': 'center'
            });
            var draftIcon = ej.buildTag(
                'span.e-designer-viewCheckIcon e-designer-viewCheck', '', {
                },
                {
                    'id': controlId + '_design_header_draft_icon'
                });
            var draftStatus = ej.buildTag('span.e-designer-draft-status-text e-designer-fontfamily', '',
                {},
                {
                    'id': controlId + '_design_header_draft_status'
                });
            draftInnerDiv.append(draftIcon, draftStatus);
            draftDiv.append(draftInnerDiv);
            var designerViewDiv = ej.buildTag('div', '', {
                'height': '40px',
                'float': 'left',
                'padding': '0px 10px',
                'display': 'table',
                'position': 'absolute',
                'left': '45%'
            }, {
                    'id': controlId + '_design_header_view_div'
                });
            var designerInnerDiv = ej.buildTag('div', '', {
                    'display': 'table-cell',
                    'vertical-align': 'middle'
                });
            var designEle = ej.buildTag(
                'span.e-rptdesigner-header-design e-userselect e-rptdesigner-header-selection e-designer-fontfamily',
                '[[[Design]]]',
                {},
                {
                    'id': controlId + '_design_header_designview'
                });
            var previewEle = ej.buildTag(
                'span.e-rptdesigner-header-preview e-userselect e-designer-fontfamily',
                '[[[Preview]]]',
                {},
                {
                    'id': controlId + '_design_header_preview'
                });
            designerInnerDiv.append(designEle, previewEle);
            designerViewDiv.append(designerInnerDiv);
            designEle.bind('click', designViewChange);
            previewEle.bind('click', designViewChange);
            var publishContainer = ej.buildTag('div', '', {
                'height': '100%',
                'display': 'table',
                'float': 'right'
            }, {
                    'id': controlId + '_design_header_publish_div'
                });
            var publishDiv = ej.buildTag('div.e-rptdesigner e-publish-btn-wrapper', '', {
                'display': 'table-cell',
                'vertical-align': 'middle',
                'text-align': 'center'
            });
            var publishBtn = ej.buildTag('button.e-designer-fontfamily', '[[[Publish]]]', {
            }, {
                    'id': controlId + '_design_header_publish_btn'
                });
            var ulTag = ej.buildTag('ul.e-publish-menu-ul e-designer-fontfamily', '', {
            }, {
                    'id': controlId + '_design_header_publish_ul'
                });
            var liTag = ej.buildTag('li', '', {
            }, {
                });
            var spanTag = ej.buildTag('a', '[[[Publish As]]]', {
            }, {});
            ulTag.append(liTag);
            liTag.append(spanTag);
            publishDiv.append(publishBtn, ulTag);
            publishContainer.append(publishDiv);
            divouter.append(backArrowOuterDiv, reportNameOuterDiv, draftDiv, designerViewDiv, publishContainer);

            publishBtn.ejSplitButton({
                targetID: controlId + '_design_header_publish_ul',
                size: "small",
                height: "28px",
                showRoundedCorner: true,
                click: $.proxy(browseReport, this, true),
                itemSelected: $.proxy(browseReport, this, false)
            });
        }

        function designViewChange(args) {
            if (args && args.currentTarget) {
                var targetEle = $(args.currentTarget);
                if (!targetEle.attr('disabled') && !targetEle.hasClass('e-rptdesigner-header-selection')) {
                    if (targetEle.hasClass('e-rptdesigner-header-design')) {
                        $('#' + controlId + '_design_header_preview').removeClass('e-rptdesigner-header-selection');
                        targetEle.addClass('e-rptdesigner-header-selection');
                        var designer = $('#' + controlId).data('boldReportDesigner');
                        designer.showDesign();
                    } else if (targetEle.hasClass('e-rptdesigner-header-preview')) {
                        $('#' + controlId + '_design_header_designview').removeClass('e-rptdesigner-header-selection');
                        targetEle.addClass('e-rptdesigner-header-selection');
                        var designer = $('#' + controlId).data('boldReportDesigner');
                        designer.showPreview();
                    }
                }
            }
        }

        function textKeyup(args) {
            if (args.keyCode === 13) {
                updateReportName();
            }
        }

        function textFocusOut(args) {
            updateReportName();
        }

        function updateReportName() {
            var rprtName = $('#' + controlId + '_designer_header_reportName').val();
            var designer = $('#' + controlId).data('boldReportDesigner');
            designer.reportFileName = (rprtName && rprtName.length > 0) ? rprtName : reportName;
        }

        function backToServer(args) {
            if (args && args.target && !$(args.target).attr('disabled')) {
                window.location.href = '@Url.Action("Reports", "Reports")';
            }
        }

        function isEmptyOrWhitespace(value) {
            if ($.trim(value) == "")
                return true;
            else
                return false;
        }

        function IsValidName(validationType, inputString) {
            var regex = new RegExp(/[*\[\\\]\|\/\:\<\>\%\+\#\?\'\"\;\,]/);
            return !regex.test(inputString);
        }

        function openBrowseDialog(args) {
            var target = $(args.target);
            var newFolderDiv = target.find('#' + controlId + '_newFolder_div');
            if (args.type === ej.ReportDesigner.BrowseType.Save) {
                if (newFolderDiv.length === 0) {
                    newFolderDiv = ej.buildTag('div', '', { 'width': '100%', 'display': 'block' }, { 'id': controlId + '_newFolder_div' });
                    var newFolderBtn = ej.buildTag('button.e-designer-content e-rptdesigner-button e-designer-new-folder-btn', 'New Category', {
                        'float': 'left'
                    }, {
                            'id': controlId + '_browse_btn_new_Folder', 'type': 'button'
                        });
                    newFolderDiv.append(newFolderBtn);
                    newFolderBtn.ejButton({
                        showRoundedCorner: false,
                        width: '120px', size: 'mini',
                        'click': $.proxy(openCategoryPopup, this), type: 'Button'
                    });
                    target.find('#' + controlId + '_footer_btn_div').prepend(newFolderDiv);
                } else {
                    newFolderDiv.css('display', 'block');
                }
            } else if (args.type === ej.ReportDesigner.BrowseType.Open && newFolderDiv.length > 0) {
                newFolderDiv.css('display', 'none');
            }
        }

        function openCategoryPopup() {
            var zIndex = $('#' + controlId + '_browse_dialog_wrapper').css('z-index');
            $('#AddCategoryPopup_overLay').css('z-index', zIndex + 1);
            $('#AddCategoryPopup_wrapper').css('z-index', zIndex + 2);
            $("#AddCategoryPopup").ejDialog("open");
        }

        function onSuccessAddCategory(data) {
            if (data && data.IsSuccess) {
                var designer = $('#' + controlId).data('boldReportDesigner');
                designer.refreshBrowseDialog();
            }
        }

        function updateAutoSavedTime(state) {
            if (state) {
                var updateTime = $('#' + controlId + '_design_header_draft_status').attr('data-datetime');
                updateRelativeTime(updateTime);
            } else {
                $('#' + controlId + '_design_header_draft_icon').addClass('e-designer-draft-status-progress').removeClass('e-designer-draft-status-success');
                $('#' + controlId + '_design_header_draft_status').text('[[[Draft save failed]]]');
            }
        }

        function updateRelativeTime(updateTime) {
            var currentTime = new Date();
            if (!updateTime) {
                updateTime = currentTime;
            }
            $('#' + controlId + '_design_header_draft_icon').removeClass('e-designer-draft-status-progress').addClass('e-designer-draft-status-success');
            $('#' + controlId + '_design_header_draft_status').text('[[[Draft auto-saved ]]]' + getRelativeTime(currentTime, new Date(updateTime)));
        }

        function getRelativeTime(currentTime, updateTime) {
            var elapsedMinutes = Math.floor((currentTime.getTime() - updateTime.getTime()) / 60000);
            var elapsedHours = Math.floor(elapsedMinutes / 60);
            var elapsedDays = Math.floor(elapsedHours / 24);
            if (elapsedMinutes < 1) {
                return '[[[just now]]]';
            } else if (elapsedMinutes < 2) {
                return '[[[a minute ago]]]';
            } else if (elapsedMinutes < 60) {
                return elapsedMinutes + ' [[[minutes ago]]]';
            } else if (elapsedMinutes < 120) {
                return '[[[an hour ago]]]';
            } else if (elapsedHours < 24) {
                return elapsedHours + ' [[[hours ago]]]';
            } else if (elapsedDays < 2) {
                return '[[[yesterday]]]';
            } else {
                return elapsedDays + ' [[[days ago]]]';
            }
        }

        function disableDesignerHeaderPane(args) {
            if (args && args.actionType && args.actionType === 'show') {
                $('#' + controlId + '_designer_header_reportName').attr('disabled', 'disabled').css('opacity', '0.5');
                $('#' + controlId + '_design_header_designview').attr('disabled', 'disabled').css('opacity', '0.5');
                $('#' + controlId + '_design_header_preview').attr('disabled', 'disabled').css('opacity', '0.5');
                $('#' + controlId + '_design_header_publish_div').css('opacity', '0.3');
                $('#' + controlId + '_design_header_publish_btn').data('ejSplitButton').disable();
            } else {
                $('#' + controlId + '_designer_header_reportName').removeAttr('disabled').css('opacity', '1');
                $('#' + controlId + '_design_header_designview').removeAttr('disabled').css('opacity', '1');
                $('#' + controlId + '_design_header_preview').removeAttr('disabled').css('opacity', '1');
                $('#' + controlId + '_design_header_publish_div').css('opacity', '1');
                $('#' + controlId + '_design_header_publish_btn').data('ejSplitButton').enable();
            }
        }
    </script>
</head>
<body style="overflow: hidden; position: static; margin: 0; padding: 0; height: 100%; width: 100%">
    <div id="container"></div>
    <div id="toast-message-container"></div>
    @if (ViewBag.isEdit)
    {
        <div id="messageBox">
            <div class="message-header"></div>
            <div class="message-box-close"></div>
            <div class="message-content text-center"></div>
            <div class="message-box-btn-holder" style="display:none"></div>
        </div>
    }

    @Html.Partial("../Items/_AddCategory", new ViewDataDictionary { { "IsReportDesigner", true } });
</body>
</html>